;;; Grammar of jingulu
;;; created at:
;;;     Wed Jul 29 23:52:04 UTC 2009
;;; based on Matrix customization system version of:
;;;     unknown time

number-rule-dtr := avm.

noun1-noun-lex := number-rule-dtr & case-marker-rule-dtr & noun-lex &
  [ INFLECTED -,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ GEND feminine,
                                       PERNUM 3rd ] ].

noun2-noun-lex := number-rule-dtr & case-marker-rule-dtr & noun-lex &
  [ INFLECTED -,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ GEND neuter,
                                       ANIMACY inam,
                                       PERNUM 3rd ] ].

noun3-noun-lex := number-rule-dtr & case-marker-rule-dtr & noun-lex &
  [ INFLECTED -,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ GEND masculine,
                                       ANIMACY anim,
                                       PERNUM 3rd ] ].

number-lex-rule := infl-add-only-no-ccont-ltol-rule & case-marker-rule-dtr &
  [ DTR number-rule-dtr ].

dual-marker-lex-rule := number-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM dual ].

plural-marker-lex-rule := number-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM non-sg ].

case-marker-rule-dtr := avm.

1s-pronoun-noun-lex := case-marker-rule-dtr & noun-lex &
  [ INFLECTED -,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PERNUM 1singular,
                                       ANIMACY anim ] ].

1dl-incl-pronoun-noun-lex := case-marker-rule-dtr & noun-lex &
  [ INFLECTED -,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PERNUM 1dual_incl,
                                       ANIMACY anim ] ].

1dl-excl-pronoun-noun-lex := case-marker-rule-dtr & noun-lex &
  [ INFLECTED -,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PERNUM 1dual_excl,
                                       ANIMACY anim ] ].

1pl-incl-pronoun-noun-lex := case-marker-rule-dtr & noun-lex &
  [ INFLECTED -,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PERNUM 1dual_incl+1plural_incl,
                                       ANIMACY anim ] ].

1plu-excl-noun-lex := case-marker-rule-dtr & noun-lex &
  [ INFLECTED -,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1dual_excl+1plural_excl ].

2s-pronoun-noun-lex := case-marker-rule-dtr & noun-lex &
  [ INFLECTED -,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2singular ].

2dl-noun-lex := case-marker-rule-dtr & noun-lex &
  [ INFLECTED -,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2dual ].

2pl-pronoun-noun-lex := case-marker-rule-dtr & noun-lex &
  [ INFLECTED -,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2dual+2plural ].

case-marker-lex-rule := lexeme-to-word-rule & add-only-no-ccont-rule &
  [ DTR case-marker-rule-dtr ].

ergative-case-marker-lex-rule := infl-ltow-rule & case-marker-lex-rule &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE erg,
                   CONT.HOOK.INDEX.PNG.ANIMACY anim ] ].

nominative-case-marker-lex-rule := const-ltow-rule & case-marker-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE nom ].

instrumental-case-marker-lex-rule := infl-ltow-rule & case-marker-lex-rule &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE erg,
                   CONT.HOOK.INDEX.PNG.ANIMACY inam ] ].

feminine-case-marker-lex-rule := infl-ltow-rule & add-only-no-ccont-rule &
  [ DTR noun1-noun-lex ].

feminine-erg-case-marker-lex-rule := feminine-case-marker-lex-rule &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE erg,
                   CONT.HOOK.INDEX.PNG [ GEND feminine,
                                         ANIMACY anim ] ] ].

subj-agreement-rule-dtr := avm.

verb1-verb-lex := subj-agreement-rule-dtr & erg-nom-transitive-verb-lex &
  [ INFLECTED -,
    SYNSEM.LOCAL.CAT.HEAD.TRANS-HACK isTrans ].

verb2-verb-lex := subj-agreement-rule-dtr & nom-intransitive-verb-lex &
  [ INFLECTED -,
    SYNSEM.LOCAL.CAT.HEAD [ FORM nonfinite,
                            TRANS-HACK isIntrans ] ].

subj-agreement-lex-rule := lexeme-to-lexeme-rule & add-only-no-ccont-rule &
  [ DTR subj-agreement-rule-dtr ].

1s-subj-agreement-marker-lex-rule := infl-ltol-rule & subj-agreement-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1st ].

1dl-incl-agreement-marker-lex-rule := infl-ltol-rule & subj-agreement-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1dual_incl ].

1dl-excl-agreement-marker-lex-rule := infl-ltol-rule & subj-agreement-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1dual_excl ].

1pl-incl-agreement-marker-lex-rule := infl-ltol-rule & subj-agreement-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1dual_incl+1plural_incl ].

1pl-excl-agreement-marker-lex-rule := infl-ltol-rule & subj-agreement-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1dual_excl+1plural_excl ].

2sg-agreement-marker-lex-rule := infl-ltol-rule & subj-agreement-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2nd ].

2dl-agreement-marker-lex-rule := infl-ltol-rule & subj-agreement-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2dual ].

2pl-agreement-marker-lex-rule := infl-ltol-rule & subj-agreement-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2dual+2plural ].

3s-agreement-marker-lex-rule := const-ltol-rule & subj-agreement-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3rd ].

3dl-subj-agreement-marker-lex-rule := infl-ltol-rule & subj-agreement-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3dual ].

3pl-subj-agreement-marker-lex-rule := infl-ltol-rule & subj-agreement-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3dual+3plural ].

object-agreement-lex-rule := lexeme-to-word-rule & add-only-no-ccont-rule &
  [ DTR subj-agreement-lex-rule ].

first-person-object-marker-lex-rule := infl-ltow-rule & object-agreement-lex-rule &
  [ SYNSEM.LOCAL.CAT [ VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1st,
                       HEAD.TRANS-HACK isTrans ] ].

second-person-object-marker-lex-rule := infl-ltow-rule & object-agreement-lex-rule &
  [ SYNSEM.LOCAL.CAT [ VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2nd,
                       HEAD.TRANS-HACK isTrans ] ].

third-person-object-marker-lex-rule := const-ltow-rule & object-agreement-lex-rule &
  [ SYNSEM.LOCAL.CAT [ VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3rd,
                       HEAD.TRANS-HACK isTrans ] ].

light-verb-tense-markers-lex-rule := infl-ltow-rule & add-only-no-ccont-rule &
  [ DTR subj-agreement-lex-rule ].

present-tense-lex-rule := light-verb-tense-markers-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E [ TENSE present,
                                     ASPECT non-habitual ] ].

past-tense-lex-rule := light-verb-tense-markers-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E [ TENSE past,
                                     ASPECT non-habitual ] ].

present-habitual-lex-rule := light-verb-tense-markers-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E [ TENSE present,
                                     ASPECT habitual ] ].

past-habitual-lex-rule := light-verb-tense-markers-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E [ TENSE past,
                                     ASPECT habitual ] ].

aux-subj-marker-lex-rule := infl-ltow-rule & add-only-no-ccont-rule &
  [ DTR aux-lex ].

aux-lex := verb-lex &
  [ INFLECTED -,
    SYNSEM.LOCAL.CAT.HEAD.AUX + ].

1s-subj-marker-lex-rule := aux-subj-marker-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1st ].

3s-subj-marker-lex-rule := aux-subj-marker-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3rd ].

2s-subj-marker-lex-rule := aux-subj-marker-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2nd ].

;;; Lexical types

;;; Nouns

noun-lex := basic-noun-lex & basic-one-arg & no-hcons-lex-item &
  [ ARG-ST < #spr >,
    SYNSEM.LOCAL.CAT.VAL [ COMPS < >,
                           SUBJ < >,
                           SPEC < >,
                           SPR < #spr &
                                 [ LOCAL.CAT.HEAD det,
                                   OPT + ] > ] ].

noun :+ [ CASE case ].

;;; Verbs

head :+ [ FORM form,
    TRANS-HACK trans-hack,
    AUX bool ].

verb-lex := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD verb ].

main-verb-lex := verb-lex & basic-verb-lex &
  [ SYNSEM.LOCAL [ CAT [ HEAD.AUX -,
                         VAL [ SPR < >,
                               SPEC < >,
                               SUBJ < #subj > ] ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT.VAL [ SPR < >,
                                     COMPS < > ],
                           CONT.HOOK.INDEX #xarg ] ] ].

intransitive-verb-lex := main-verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST.FIRST.LOCAL.CAT.HEAD noun ].

transitive-verb-lex := main-verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] > ].

nom-intransitive-verb-lex := intransitive-verb-lex &
  [ ARG-ST.FIRST.LOCAL.CAT.HEAD noun &
                                [ CASE nom ] ].

erg-nom-transitive-verb-lex := transitive-verb-lex &
  [ ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE erg ] ],
             [ LOCAL.CAT.HEAD noun &
                              [ CASE nom ] ] > ].

;;; Auxiliaries

subj-raise-aux := aux-lex & trans-first-arg-raising-lex-item &
  [ SYNSEM.LOCAL [ CAT.VAL [ SUBJ < #subj >,
                             COMPS < #comps >,
                             SPR < >,
                             SPEC < > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST < #subj &
             [ LOCAL [ CONT.HOOK.INDEX #xarg,
                       CAT [ VAL [ SPR < >,
                                   COMPS < > ],
                             HEAD noun &
                                  [ CASE #case ] ] ] ],
             #comps &
             [ LOCAL.CAT [ HEAD verb,
                           VAL [ COMPS < >,
                                 SUBJ < [ LOCAL.CAT.HEAD.CASE #case ] > ] ] ] > ].

subj-raise-aux-with-pred := subj-raise-aux & norm-sem-lex-item & trans-first-arg-raising-lex-item-1.

light-verb1-aux-lex := subj-raise-aux-with-pred &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.TENSE present,
                   CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM nonfinite ] ].

;;; Case

case := *top*.
erg := case.  ; ergative
nom := case.  ; nominative

png :+ [ PERNUM pernum,
    GEND gender,
    ANIMACY animacy ].

;;; Pernum

pernum := *top*.
non-sg := pernum.
plural := non-sg.
dual := non-sg.
singular := pernum.
1st := pernum.
2nd := pernum.
3rd := pernum.
1plural := 1st & plural.
1plural_incl := 1plural & 1dual_incl+1plural_incl.
1plural_excl := 1plural & 1dual_excl+1plural_excl.
2plural := plural & 2dual+2plural.
3plural := plural & 3dual+3plural.
1dual := 1st & dual.
1dual_incl := 1dual & 1dual_incl+1plural_incl.
1dual_excl := 1dual & 1dual_excl+1plural_excl.
2dual := dual & 2dual+2plural.
3dual := dual & 3dual+3plural.
1singular := 1st & singular.
2singular := 2nd & singular.
3singular := 3rd & singular.
1dual_incl+1plural_incl := non-sg & 1st.
1dual_excl+1plural_excl := 1st & non-sg.
2dual+2plural := 2nd & non-sg.
3dual+3plural := 3rd & non-sg.

;;; Gender

gender := *top*.
feminine := gender.
non-feminine := gender.
vegetable := non-feminine.
masculine := non-feminine.
neuter := non-feminine.

;;; Form

form := *top*.
nonfinite := form.
finite := form.

;;; Tense

past := tense.
present := tense.
future := tense.

;;; Aspect

habitual := aspect.
non-habitual := aspect.

;;; Animacy

animacy := *top*.
anim := animacy.
inam := animacy.

;;; Trans-hack

trans-hack := *top*.
isTrans := trans-hack.
isIntrans := trans-hack.

;;; Phrasal types

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

basic-head-comp-phrase :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-mod-phrase-simple :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

; We can't just use the V-final and V-initial word
; order modules together to get a good free word order
; module. The root of the problem seems to be that we
; need the subject to be able to attach inside the
; object(s) for VSO and OSV, but at the same time, we
; don't want complete flexibility on order of attachment
; when the verb is in the middle -- that would give
; spurious ambiguity.  This solution adopts the xmod
; hierarchy to enforce right-first attachment.  That is,
; all arguments appears to the right of the verb must
; attach before all arguments appearing to the left.  The
; linguistic prediction of this analysis is that free
; word order languages do not have a consistent VP
; consituent, even when the verb and object are adjacent
; (OV order).  Using a separate feature for tracking
; argument attachment (as opposed to modifier
; attachment).  We might be able to collapse these one
; day, but that's not obvious.

synsem :+ [ ATTACH xmod ].

head-initial-head-nexus := head-initial &
  [ SYNSEM.ATTACH lmod,
    HEAD-DTR.SYNSEM.ATTACH notmod-or-lmod ].

head-final-head-nexus := head-final &
  [ SYNSEM.ATTACH rmod ].

; We'll need to add identification of ATTACH between
; mother and head-daughter for all other kinds of phrases
; if we do this.  Just for illustration, I'm putting it
; in for head-adjunct phrases here:

head-mod-phrase :+ [ SYNSEM.ATTACH #attach,
    HEAD-DTR.SYNSEM.ATTACH #attach ].

head-subj-phrase := decl-head-subj-phrase & head-initial-head-nexus.

subj-head-phrase := decl-head-subj-phrase & head-final-head-nexus.

head-comp-phrase := basic-head-1st-comp-phrase & head-initial-head-nexus &
  [ SYNSEM.LOCAL.CAT.HEAD.AUX - ].

; The head of comp-head-phrase can't be: ['comp']

comp-head-phrase := basic-head-1st-comp-phrase & head-final-head-nexus &
  [ SYNSEM.LOCAL.CAT.HEAD +nvjrpdmo ].

head-comp-phrase-2 := basic-head-2nd-comp-phrase & head-initial-head-nexus.

comp-head-phrase-2 := basic-head-2nd-comp-phrase & head-final-head-nexus.

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS <! [ PRED "exist_q_rel" ] !> ].

; Type for negative adverbs.

neg-adv-lex := basic-scopal-adverb-lex &
  [ SYNSEM.LOCAL.CAT [ VAL [ SPR < >,
                             COMPS < >,
                             SUBJ < > ],
                       POSTHEAD -,
                       HEAD.MOD < [ LOCAL.CAT [ HEAD verb,
                                                VAL [ SUBJ null,
                                                      COMPS null ] ] ] > ] ].

; This grammar includes head-modifier rules.  To keep
; out extraneous parses, constrain the value of MOD on
; various subtypes of head.  This may need to be loosened later.
; This constraint says that only adverbs, adjectives,
; and adpositions can be modifiers.

+nvcdmo :+ [ MOD < > ].

;;; Coordination Strategy 1

n1-top-coord-rule := basic-n-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

n1-bottom-coord-rule := unary-bottom-coord-rule & n-bottom-coord-phrase &
  [ SYNSEM.LOCAL [ COORD-STRAT "1",
                   COORD-REL.PRED "_and_coord_rel" ] ].

;;; Coordination Strategy 1

s1-top-coord-rule := basic-s-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

s1-bottom-coord-rule := unary-bottom-coord-rule & s-bottom-coord-phrase &
  [ SYNSEM.LOCAL [ COORD-STRAT "1",
                   COORD-REL.PRED "_and_coord_rel" ] ].

; We treat question particles as complementizers.
; Here is the lexical type for complementizers.

complementizer-lex-item := raise-sem-lex-item & basic-one-arg &
  [ SYNSEM.LOCAL.CAT [ HEAD comp &
                            [ MOD < > ],
                       VAL [ SPR < >,
                             SUBJ < >,
                             COMPS < #comp > ] ],
    ARG-ST < #comp &
             [ LOCAL.CAT [ MC +,
                           HEAD verb,
                           VAL [ SUBJ < >,
                                 COMPS < > ] ] ] > ].

; Subtype for question particles. Constrains SF to ques.

qpart-lex-item := complementizer-lex-item &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.SF ques ].
