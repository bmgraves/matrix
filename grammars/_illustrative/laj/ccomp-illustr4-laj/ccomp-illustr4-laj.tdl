;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of ccomp-illustr4-laj
;;; created at:
;;;     Wed Jan 10 23:04:36 UTC 2018
;;; based on Matrix customization system version of:
;;;     Mon Jan  8 23:36:38 UTC 2018
;;;
;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

png :+ [ PER person ].

head :+ [ FORM form,
    INIT bool ].

basic-head-comp-phrase :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-opt-subj-phrase :+ [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

+nvcdmo :+ [ MOD < > ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Person

person := *top*.
1st := person.
2nd := person.
3rd := person.

;;; Form

form := *top*.
nonfinite := form.
finite := form.
infinitive := nonfinite.

;;; Aspect

perfective := aspect.
habitual := aspect.

;;; Mood

subjunctive := mood.
indicative := mood.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

noun-lex := basic-noun-lex & basic-one-arg & no-hcons-lex-item & non-mod-lex-item &
  [ ARG-ST < #spr >,
    SYNSEM.LOCAL.CAT.VAL [ COMPS < >,
                           SUBJ < >,
                           SPEC < >,
                           SPR < #spr &
                                 [ LOCAL.CAT.HEAD det,
                                   OPT + ] > ] ].

noun1-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

;;; Verbs

verb-lex := basic-verb-lex & non-mod-lex-item &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPR < >,
                             SPEC < >,
                             SUBJ < #subj > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT cat-sat &
                               [ VAL [ SPR < >,
                                       COMPS < > ] ],
                           CONT.HOOK.INDEX #xarg ] ] ].

intransitive-verb-lex := verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST.FIRST.LOCAL.CAT.HEAD noun ].

transitive-verb-lex := verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT cat-sat &
                         [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] > ].

clausal-verb-lex := verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT.VAL [ SPR < >,
                               COMPS < >,
                               SUBJ < > ] ] > ].

tran-verb-lex := transitive-verb-lex.

3sg-hab-verb-lex := tran-verb-lex &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E [ ASPECT habitual,
                                       MOOD indicative ],
                   CAT [ VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd,
                         HEAD.FORM finite ] ] ].

3sg-perf-verb-lex := tran-verb-lex &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E [ ASPECT perfective,
                                       MOOD indicative ],
                   CAT [ VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd,
                         HEAD.FORM finite ] ] ].

1sg-sjnct-verb-lex := tran-verb-lex &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.MOOD subjunctive,
                   CAT [ VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 1st,
                         HEAD.FORM nonfinite ] ] ].

1sg-inf-verb-lex := tran-verb-lex &
  [ SYNSEM.LOCAL.CAT [ VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 1st,
                       HEAD.FORM infinitive ] ].

1sg-know-clausal-verb-lex := clausal-verb-lex & clausal-second-arg-trans-lex-item &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E [ MOOD indicative,
                                       ASPECT habitual ],
                   CAT [ HEAD.FORM finite,
                         VAL [ SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 1st,
                               COMPS < [ LOCAL [ CAT.HEAD comp,
                                                 CONT.HOOK.INDEX.E.MOOD indicative ] ] > ] ] ] ].

3sg-want-clausal-verb-lex := clausal-verb-lex & clausal-second-arg-trans-lex-item &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E [ ASPECT perfective,
                                       MOOD indicative ],
                   CAT [ HEAD.FORM finite,
                         VAL [ SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd,
                               COMPS < [ LOCAL [ CAT.HEAD comp,
                                                 CONT.HOOK.INDEX.E.MOOD subjunctive ] ] > ] ] ] ].

1sg-want-clausal-verb-lex := clausal-verb-lex & clausal-second-arg-trans-lex-item &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.MOOD indicative,
                   CAT [ HEAD.FORM finite,
                         VAL [ SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 1st,
                               COMPS < [ LOCAL.CAT.HEAD verb &
                                                        [ FORM infinitive ] ] > ] ] ] ].

;;; Complementizers

comp-lex-item := raise-sem-lex-item & basic-one-arg &
  [ SYNSEM.LOCAL.CAT [ HEAD comp &
                            [ MOD < > ],
                       VAL [ SPR < >,
                             SUBJ < >,
                             COMPS < #comps > ] ],
    ARG-ST < #comps &
             [ LOCAL.CAT [ HEAD verb,
                           MC -,
                           VAL [ SUBJ < >,
                                 COMPS < > ] ] ] > ].

comps1-comp-lex-item := comp-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.E.MOOD indicative ].

comps2-comp-lex-item := comp-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.E.MOOD subjunctive ].

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

;;; Lexical rule types

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

head-comp-phrase := basic-head-1st-comp-phrase & head-initial.

subj-head-phrase := decl-head-subj-phrase & head-final &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS <! [ PRED "exist_q_rel" ] !> ].
