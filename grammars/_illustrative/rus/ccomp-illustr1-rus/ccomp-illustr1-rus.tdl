;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of ccomp-illustr1-rus
;;; created at:
;;;     Fri Jan 05 23:29:39 UTC 2018
;;; based on Matrix customization system version of:
;;;     unknown time
;;;
;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

noun :+ [ CASE case ].

head :+ [ NMZ bool,
    FORM form,
    INIT bool ].

inflected :+ [ CASE1-FLAG luk,
    CASE2-FLAG luk,
    CASE3-FLAG luk,
    CASE4-FLAG luk ].

infl-satisfied :+ [ CASE1-FLAG na-or-+,
    CASE2-FLAG na-or-+,
    CASE3-FLAG na-or-+,
    CASE4-FLAG na-or-+ ].

basic-head-comp-phrase :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-opt-subj-phrase :+ [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

; We can't just use the V-final and V-initial word
; order modules together to get a good free word order
; module. The root of the problem seems to be that we
; need the subject to be able to attach inside the
; object(s) for VSO and OSV, but at the same time, we
; don't want complete flexibility on order of attachment
; when the verb is in the middle -- that would give
; spurious ambiguity.  This solution adopts the xmod
; hierarchy to enforce right-first attachment.  That is,
; all arguments appears to the right of the verb must
; attach before all arguments appearing to the left.  The
; linguistic prediction of this analysis is that free
; word order languages do not have a consistent VP
; consituent, even when the verb and object are adjacent
; (OV order).  Using a separate feature for tracking
; argument attachment (as opposed to modifier
; attachment).  We might be able to collapse these one
; day, but that's not obvious.

synsem :+ [ ATTACH xmod ].

; We'll need to add identification of ATTACH between
;     mother and head-daughter for all other kinds of phrases
;     if we do this.  Just for illustration, I'm putting it
;     in for head-adjunct phrases here:

head-mod-phrase :+ [ SYNSEM.ATTACH #attach,
    HEAD-DTR.SYNSEM.ATTACH #attach ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Case

case := *top*.
nom := case.  ; nom
acc := case.  ; acc
ins := case.  ; instr
gen := case.  ; gen

;;; Form

form := *top*.
nonfinite := form.
finite := form.
chto := form.
kak := form.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

noun-lex := basic-noun-lex & basic-one-arg & no-hcons-lex-item & non-mod-lex-item &
  [ ARG-ST < #spr >,
    SYNSEM.LOCAL.CAT [ VAL [ COMPS < >,
                             SUBJ < >,
                             SPEC < >,
                             SPR < #spr &
                                   [ LOCAL.CAT.HEAD det,
                                     OPT + ] > ],
                       HEAD.NMZ - ] ].

masc-noun-lex := noun-lex &
  [ INFLECTED.CASE1-FLAG - ].

fem-noun-lex := noun-lex &
  [ INFLECTED.CASE2-FLAG - ].

;;; Verbs

verb-lex := basic-verb-lex & non-mod-lex-item &
  [ ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT cat-sat &
                               [ VAL [ SPR < >,
                                       COMPS < > ] ],
                           CONT.HOOK.INDEX #xarg ] ],
    SYNSEM.LOCAL [ CONT.HOOK.XARG #xarg,
                   CAT [ VAL [ SPR < >,
                               SPEC < >,
                               SUBJ < #subj > ],
                         HEAD.NMZ - ] ] ].

intransitive-verb-lex := verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST.FIRST.LOCAL.CAT.HEAD noun ].

transitive-verb-lex := verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT cat-sat &
                         [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] > ].

clausal-verb-lex := verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT.VAL [ SPR < >,
                               COMPS < >,
                               SUBJ < > ] ] > ].

nom-intransitive-verb-lex := intransitive-verb-lex &
  [ ARG-ST.FIRST.LOCAL.CAT.HEAD noun &
                                [ CASE nom ] ].

nom-acc-transitive-verb-lex := transitive-verb-lex &
  [ ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE nom ] ],
             [ LOCAL.CAT.HEAD noun &
                              [ CASE acc ] ] > ].

clausal-nom-acc-verb-lex := clausal-verb-lex &
  [ ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE nom ] ],
             [ LOCAL.CAT.HEAD noun &
                              [ CASE acc ] ] > ].

clausal-nom-verb-lex := clausal-verb-lex &
  [ ARG-ST.FIRST.LOCAL.CAT.HEAD noun &
                                [ CASE nom ] ].

tran-ipfv-verb-lex := nom-acc-transitive-verb-lex.

tran-pfv-verb-lex := nom-acc-transitive-verb-lex & case3-rule-dtr &
  [ INFLECTED.CASE3-FLAG - ].

cverb1-clausal-verb-lex := clausal-nom-verb-lex & clausal-second-arg-trans-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT.HEAD comp &
                                                  [ FORM chto ] ] > ].

cverb3-clausal-verb-lex := clausal-nom-acc-verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT.HEAD noun &
                                                  [ NMZ +,
                                                    FORM nonfinite ] ] > ].

intran-verb-lex := nom-intransitive-verb-lex.

intran-nmzbl-verb-lex := nom-intransitive-verb-lex & case4-rule-dtr &
  [ INFLECTED.CASE4-FLAG - ].

cverb2-clausal-verb-lex := clausal-nom-verb-lex & clausal-second-arg-trans-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT.HEAD comp &
                                                  [ FORM kak ] ] > ].

;;; Complementizers

comp-lex-item := raise-sem-lex-item & basic-one-arg &
  [ SYNSEM.LOCAL.CAT [ HEAD comp &
                            [ MOD < > ],
                       VAL [ SPR < >,
                             SUBJ < >,
                             COMPS < #comps > ] ],
    ARG-ST < #comps &
             [ LOCAL.CAT [ HEAD verb,
                           MC -,
                           VAL [ SUBJ < >,
                                 COMPS < > ] ] ] > ].

comps1-comp-lex-item := comp-lex-item &
  [ SYNSEM.LOCAL.CAT [ VAL.COMPS.FIRST.LOCAL.CAT.HEAD [ NMZ -,
                                                        FORM finite ],
                       HEAD [ FORM chto,
                              INIT + ] ] ].

comps4-comp-lex-item := comp-lex-item &
  [ SYNSEM.LOCAL.CAT [ VAL.COMPS.FIRST.LOCAL.CAT.HEAD [ NMZ -,
                                                        FORM finite ],
                       HEAD [ FORM kak,
                              INIT + ] ] ].

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

low-nominalization-lex-rule := cat-change-with-ccont-lex-rule &
  [ SYNSEM.LOCAL.CAT [ HEAD noun &
                            [ MOD #mod ],
                       VAL [ SUBJ < [ LOCAL [ CAT [ HEAD noun,
                                                    VAL.SPR < > ],
                                              CONT.HOOK.INDEX #subj ] ] >,
                             SPEC #spec,
                             SPR < [ OPT + ] > ],
                       MC #mc,
                       MKG #mkg,
                       HC-LIGHT #hc-light,
                       POSTHEAD #posthead ],
    C-CONT [ RELS <! [ PRED "nominalized_rel",
                       LBL #ltop,
                       ARG0 ref-ind & #arg0,
                       ARG1 #arg1 ] !>,
             HCONS <! qeq &
                      [ HARG #arg1,
                        LARG #larg ] !>,
             HOOK [ INDEX #arg0,
                    LTOP #ltop ] ],
    DTR.SYNSEM.LOCAL [ CAT [ HEAD.MOD #mod,
                             VAL [ SUBJ < [ LOCAL [ CAT.HEAD noun,
                                                    CONT.HOOK.INDEX #subj ] ] >,
                                   SPEC #spec ],
                             MC #mc,
                             MKG #mkg,
                             HC-LIGHT #hc-light,
                             POSTHEAD #posthead ],
                       CONT.HOOK.LTOP #larg ] ].

low-nmz-trans-lex-rule := low-nominalization-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < [ LOCAL [ CAT [ HEAD noun,
                                                 VAL.SPR < > ],
                                           CONT.HOOK.INDEX #obj ] ] >,
    DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < [ LOCAL [ CAT.HEAD noun,
                                               CONT.HOOK.INDEX #obj ] ] > ].

low-nmz-compsid-lex-rule := low-nominalization-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS #comps,
    DTR.SYNSEM.LOCAL.CAT.VAL.COMPS #comps ].

;;; Intermediate rule types

case4-rule-dtr := word-or-lexrule.
case3-rule-dtr := word-or-lexrule.

;;; Lexical rule types

case1-lex-rule-super := add-only-no-ccont-rule &
  [ INFLECTED [ CASE1-FLAG +,
                CASE4-FLAG #case4,
                CASE3-FLAG #case3,
                CASE2-FLAG #case2 ],
    DTR masc-noun-lex &
        [ INFLECTED [ CASE4-FLAG #case4,
                      CASE3-FLAG #case3,
                      CASE2-FLAG #case2 ] ] ].

nom1-lex-rule := case1-lex-rule-super & const-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE nom ].

acc1-lex-rule := case1-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE acc ].

instr1-lex-rule := case1-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE ins ].

gen1-lex-rule := case1-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE gen ].

case2-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED [ CASE2-FLAG +,
                CASE1-FLAG #case1,
                CASE4-FLAG #case4,
                CASE3-FLAG #case3 ],
    DTR fem-noun-lex &
        [ INFLECTED [ CASE1-FLAG #case1,
                      CASE4-FLAG #case4,
                      CASE3-FLAG #case3 ] ] ].

nom2-lex-rule := case2-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE nom ].

acc2-lex-rule := case2-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE acc ].

gen2-lex-rule := case2-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE gen ].

case3-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED [ CASE3-FLAG +,
                CASE1-FLAG #case1,
                CASE4-FLAG #case4,
                CASE2-FLAG #case2 ],
    DTR case3-rule-dtr &
        [ INFLECTED [ CASE1-FLAG #case1,
                      CASE4-FLAG #case4,
                      CASE2-FLAG #case2 ] ] ].

nom3-lex-rule := case3-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE nom ].

acc3-lex-rule := case3-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE acc ].

case4-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED [ CASE4-FLAG +,
                CASE1-FLAG #case1,
                CASE3-FLAG #case3,
                CASE2-FLAG #case2 ],
    DTR case4-rule-dtr &
        [ INFLECTED [ CASE1-FLAG #case1,
                      CASE3-FLAG #case3,
                      CASE2-FLAG #case2 ] ] ].

acc4-lex-rule := case4-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE acc ].

nmz1-lex-rule-super := case3-rule-dtr & infl-lex-rule & low-nmz-trans-lex-rule &
  [ INFLECTED #infl,
    DTR tran-pfv-verb-lex &
        [ INFLECTED #infl ] ].

low1-lex-rule := nmz1-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD.CASE ins,
                           COMPS.FIRST.LOCAL.CAT.HEAD.CASE gen ] ].

nmz2-lex-rule-super := case4-rule-dtr & infl-lex-rule & low-nmz-compsid-lex-rule &
  [ INFLECTED #infl,
    DTR intran-nmzbl-verb-lex &
        [ INFLECTED #infl ] ].

low2-lex-rule := nmz2-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD.CASE gen ].

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

non-event-subj-head-phrase := head-final-head-nexus & basic-head-subj-phrase &
  [ HEAD-DTR.SYNSEM [ LOCAL.CONT.HOOK.INDEX ref-ind,
                      NON-LOCAL [ QUE 0-dlist,
                                  REL 0-dlist ] ],
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.SPR < > ].

non-event-head-subj-phrase := head-initial-head-nexus & basic-head-subj-phrase &
  [ HEAD-DTR.SYNSEM [ LOCAL.CONT.HOOK.INDEX ref-ind,
                      NON-LOCAL [ QUE 0-dlist,
                                  REL 0-dlist ] ],
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.SPR < > ].

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

head-initial-head-nexus := head-initial &
  [ SYNSEM.ATTACH lmod,
    HEAD-DTR.SYNSEM.ATTACH notmod-or-lmod ].

head-final-head-nexus := head-final &
  [ SYNSEM.ATTACH rmod ].

head-subj-phrase := decl-head-subj-phrase & head-initial-head-nexus.

subj-head-phrase := decl-head-subj-phrase & head-final-head-nexus.

head-comp-phrase := basic-head-1st-comp-phrase & head-initial-head-nexus &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.INIT + ].

comp-head-phrase := basic-head-1st-comp-phrase & head-final-head-nexus &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.INIT - ].

head-comp-phrase-2 := basic-head-2nd-comp-phrase & head-initial-head-nexus.

comp-head-phrase-2 := basic-head-2nd-comp-phrase & head-final-head-nexus.

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS <! [ PRED "exist_q_rel" ] !> ].
