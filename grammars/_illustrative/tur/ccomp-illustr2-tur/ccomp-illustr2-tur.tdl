;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of ccomp-illustr2-tur
;;; created at:
;;;     Tue Jan 09 17:30:59 UTC 2018
;;; based on Matrix customization system version of:
;;;     Mon Jan  8 23:36:38 UTC 2018
;;;
;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

noun :+ [ CASE case ].

head :+ [ NMZ bool,
    FORM form,
    INIT bool ].

inflected :+ [ CASE-OR-PERNUM-FLAG luk,
    AGR-OR-ASP-OR-TENSE-FLAG luk,
    CASE-FLAG luk ].

infl-satisfied :+ [ CASE-OR-PERNUM-FLAG na-or-+,
    AGR-OR-ASP-OR-TENSE-FLAG na-or-+,
    CASE-FLAG na-or-+ ].

png :+ [ PER person ].

basic-head-comp-phrase :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-opt-subj-phrase :+ [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Case

case := *top*.
nom := case.  ; nom
acc := case.  ; acc
gen := case.  ; gen
dat := case.  ; dat

;;; Person

person := *top*.
1st := person.
2nd := person.
3rd := person.

;;; Form

form := *top*.
nonfinite := form.
finite := form.
subjunctive := nonfinite.

;;; Tense

past := tense.
present := tense.

;;; Aspect

optative := aspect.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

noun-lex := basic-noun-lex & basic-one-arg & no-hcons-lex-item & non-mod-lex-item &
  [ ARG-ST < #spr >,
    SYNSEM.LOCAL.CAT [ VAL [ COMPS < >,
                             SUBJ < >,
                             SPEC < >,
                             SPR < #spr &
                                   [ LOCAL.CAT.HEAD det,
                                     OPT + ] > ],
                       HEAD.NMZ - ] ].

2sg-nom-noun-lex := noun-lex &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG.PER 2nd,
                   CAT.HEAD.CASE nom ] ].

2sg-acc-noun-lex := noun-lex &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG.PER 2nd,
                   CAT.HEAD.CASE acc ] ].

noun1-noun-lex := noun-lex & case-rule-dtr &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd,
    INFLECTED.CASE-FLAG - ].

2sg-gen-noun-lex := noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE gen,
                   CONT.HOOK.INDEX.PNG.PER 2nd ] ].

;;; Verbs

verb-lex := basic-verb-lex & non-mod-lex-item & agr-rule-dtr & case-rule-dtr & pernum-rule-dtr &
  [ ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT cat-sat &
                               [ VAL [ SPR < >,
                                       COMPS < > ] ],
                           CONT.HOOK.INDEX #xarg ] ],
    SYNSEM.LOCAL [ CONT.HOOK.XARG #xarg,
                   CAT [ VAL [ SPR < >,
                               SPEC < >,
                               SUBJ < #subj > ],
                         HEAD.NMZ - ] ],
    INFLECTED [ CASE-OR-PERNUM-FLAG -,
                AGR-OR-ASP-OR-TENSE-FLAG - ] ].

intransitive-verb-lex := verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST.FIRST.LOCAL.CAT.HEAD noun ].

transitive-verb-lex := verb-lex & transitive-lex-item &
  [ ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT cat-sat &
                         [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] >,
    SYNSEM.LOCAL.CAT [ VAL.COMPS < #comps >,
                       HEAD.INIT - ] ].

clausal-verb-lex := verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT.VAL [ SPR < >,
                               COMPS < >,
                               SUBJ < > ] ] > ].

nom-intransitive-verb-lex := intransitive-verb-lex &
  [ ARG-ST.FIRST.LOCAL.CAT.HEAD noun &
                                [ CASE nom ] ].

nom-acc-transitive-verb-lex := transitive-verb-lex &
  [ ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE nom ] ],
             [ LOCAL.CAT.HEAD noun &
                              [ CASE acc ] ] > ].

clausal-nom-acc-verb-lex := clausal-verb-lex &
  [ ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE nom ] ],
             [ LOCAL.CAT.HEAD noun &
                              [ CASE acc ] ] > ].

clausal-nom-verb-lex := clausal-verb-lex &
  [ ARG-ST.FIRST.LOCAL.CAT.HEAD noun &
                                [ CASE nom ] ].

tran-verb-lex := transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.CASE dat ].

desire-clausal-verb-lex := clausal-nom-acc-verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT [ VAL.COMPS < [ LOCAL.CAT.HEAD noun &
                                                    [ NMZ +,
                                                      FORM nonfinite ] ] >,
                       HEAD.INIT - ] ].

want-extra-clausal-verb-lex := clausal-nom-verb-lex & clausal-second-arg-trans-lex-item &
  [ SYNSEM.LOCAL.CAT [ VAL.COMPS < [ LOCAL.CAT.HEAD +vc &
                                                    [ NMZ -,
                                                      FORM finite ] ] >,
                       HEAD.INIT + ] ].

belief-clausal-verb-lex := clausal-nom-verb-lex & clausal-second-arg-trans-lex-item &
  [ SYNSEM.LOCAL.CAT [ VAL.COMPS < [ LOCAL.CAT.HEAD +vc &
                                                    [ NMZ -,
                                                      FORM finite ] ] >,
                       HEAD.INIT - ] ].

belief-subj-clausal-verb-lex := clausal-nom-verb-lex & clausal-second-arg-trans-lex-item &
  [ SYNSEM.LOCAL.CAT [ VAL.COMPS < [ LOCAL.CAT.HEAD verb &
                                                    [ NMZ -,
                                                      FORM subjunctive ] ] >,
                       HEAD.INIT - ] ].

;;; Complementizers

comp-lex-item := raise-sem-lex-item & basic-one-arg &
  [ SYNSEM.LOCAL.CAT [ HEAD comp &
                            [ MOD < > ],
                       VAL [ SPR < >,
                             SUBJ < >,
                             COMPS < #comps > ] ],
    ARG-ST < #comps &
             [ LOCAL.CAT [ HEAD verb,
                           MC -,
                           VAL [ SUBJ < >,
                                 COMPS < > ] ] ] > ].

comps2-comp-lex-item := comp-lex-item &
  [ SYNSEM.LOCAL.CAT [ HEAD.INIT +,
                       VAL.COMPS < [ LOCAL.CAT.HEAD [ FORM finite,
                                                      NMZ - ] ] > ] ].

comps3-comp-lex-item := comp-lex-item &
  [ SYNSEM.LOCAL.CAT [ HEAD.INIT -,
                       VAL.COMPS < [ LOCAL.CAT.HEAD [ FORM finite,
                                                      NMZ - ] ] > ] ].

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

low-nominalization-lex-rule := cat-change-with-ccont-lex-rule &
  [ SYNSEM.LOCAL.CAT [ HEAD noun &
                            [ MOD #mod ],
                       VAL [ SUBJ < [ LOCAL [ CAT [ HEAD noun,
                                                    VAL.SPR < > ],
                                              CONT.HOOK.INDEX #subj ] ] >,
                             SPEC #spec,
                             SPR < [ OPT + ] > ],
                       MC #mc,
                       MKG #mkg,
                       HC-LIGHT #hc-light,
                       POSTHEAD #posthead ],
    C-CONT [ RELS <! [ PRED "nominalized_rel",
                       LBL #ltop,
                       ARG0 ref-ind & #arg0,
                       ARG1 #arg1 ] !>,
             HCONS <! qeq &
                      [ HARG #arg1,
                        LARG #larg ] !>,
             HOOK [ INDEX #arg0,
                    LTOP #ltop ] ],
    DTR.SYNSEM.LOCAL [ CAT [ HEAD.MOD #mod,
                             VAL [ SUBJ < [ LOCAL [ CAT.HEAD noun,
                                                    CONT.HOOK.INDEX #subj ] ] >,
                                   SPEC #spec ],
                             MC #mc,
                             MKG #mkg,
                             HC-LIGHT #hc-light,
                             POSTHEAD #posthead ],
                       CONT.HOOK.LTOP #larg ] ].

low-nmz-compsid-lex-rule := low-nominalization-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS #comps,
    DTR.SYNSEM.LOCAL.CAT.VAL.COMPS #comps ].

;;; Intermediate rule types

agr-rule-dtr := word-or-lexrule.
pernum-rule-dtr := word-or-lexrule.
case-rule-dtr := word-or-lexrule.

;;; Lexical rule types

case-lex-rule-super := add-only-no-ccont-rule &
  [ INFLECTED [ CASE-OR-PERNUM-FLAG +,
                CASE-FLAG +,
                AGR-OR-ASP-OR-TENSE-FLAG #agr-or-asp-or-tense ],
    DTR case-rule-dtr &
        [ INFLECTED.AGR-OR-ASP-OR-TENSE-FLAG #agr-or-asp-or-tense ] ].

nom4-lex-rule := case-lex-rule-super & const-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE nom ].

dat4-lex-rule := case-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE dat ].

acc4-lex-rule := case-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE acc ].

agr-lex-rule-super := add-only-no-ccont-rule & case-rule-dtr & infl-lex-rule &
  [ INFLECTED [ AGR-OR-ASP-OR-TENSE-FLAG +,
                CASE-OR-PERNUM-FLAG #case-or-pernum,
                CASE-FLAG #case ],
    DTR agr-rule-dtr &
        [ INFLECTED [ CASE-OR-PERNUM-FLAG #case-or-pernum,
                      CASE-FLAG #case ] ] ].

2sg-noun-lex-rule := agr-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 2nd ].

tense-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & pernum-rule-dtr &
  [ INFLECTED [ AGR-OR-ASP-OR-TENSE-FLAG +,
                CASE-OR-PERNUM-FLAG #case-or-pernum,
                CASE-FLAG #case ],
    DTR verb-lex &
        [ INFLECTED [ CASE-OR-PERNUM-FLAG #case-or-pernum,
                      CASE-FLAG #case ] ] ].

pres-lex-rule := tense-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE present ].

past-lex-rule := tense-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE past ].

nmz-lex-rule-super := agr-rule-dtr & case-rule-dtr & infl-lex-rule & low-nmz-compsid-lex-rule &
  [ INFLECTED #infl,
    DTR verb-lex &
        [ INFLECTED #infl ] ].

low-lex-rule := nmz-lex-rule-super &
  [ SYNSEM.LOCAL.CAT [ VAL.SUBJ.FIRST.LOCAL.CAT.HEAD.CASE gen,
                       HEAD.FORM nonfinite ] ].

pernum-lex-rule-super := add-only-no-ccont-rule &
  [ INFLECTED [ CASE-OR-PERNUM-FLAG +,
                AGR-OR-ASP-OR-TENSE-FLAG #agr-or-asp-or-tense,
                CASE-FLAG #case ],
    DTR pernum-rule-dtr &
        [ INFLECTED [ AGR-OR-ASP-OR-TENSE-FLAG #agr-or-asp-or-tense,
                      CASE-FLAG #case ] ] ].

1sg-lex-rule := infl-lex-rule & pernum-lex-rule-super &
  [ SYNSEM.LOCAL.CAT [ HEAD.FORM finite,
                       VAL.SUBJ.FIRST.LOCAL [ CONT.HOOK.INDEX.PNG.PER 1st,
                                              CAT.HEAD.CASE nom ] ] ].

2sg-lex-rule := infl-lex-rule & pernum-lex-rule-super &
  [ SYNSEM.LOCAL.CAT [ HEAD.FORM finite,
                       VAL.SUBJ.FIRST.LOCAL [ CONT.HOOK.INDEX.PNG.PER 2nd,
                                              CAT.HEAD.CASE nom ] ] ].

3sg-lex-rule := const-lex-rule & pernum-lex-rule-super &
  [ SYNSEM.LOCAL.CAT [ HEAD.FORM finite,
                       VAL.SUBJ.FIRST.LOCAL [ CONT.HOOK.INDEX.PNG.PER 3rd,
                                              CAT.HEAD.CASE nom ] ] ].

subj-lex-rule := const-lex-rule & pernum-lex-rule-super &
  [ SYNSEM.LOCAL.CAT [ HEAD.FORM subjunctive,
                       VAL.SUBJ.FIRST.LOCAL.CAT.HEAD.CASE acc ] ].

asp-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & pernum-rule-dtr &
  [ INFLECTED [ AGR-OR-ASP-OR-TENSE-FLAG +,
                CASE-OR-PERNUM-FLAG #case-or-pernum,
                CASE-FLAG #case ],
    DTR verb-lex &
        [ INFLECTED [ CASE-OR-PERNUM-FLAG #case-or-pernum,
                      CASE-FLAG #case ] ] ].

opt-lex-rule := asp-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT optative ].

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

non-event-subj-head-phrase := basic-head-subj-phrase & head-final &
  [ NON-HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.SPR < >,
    HEAD-DTR.SYNSEM [ NON-LOCAL [ QUE 0-dlist,
                                  REL 0-dlist ],
                      LOCAL [ CONT.HOOK.INDEX ref-ind,
                              CAT.VAL.COMPS < > ] ] ].

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

comp-head-phrase := basic-head-1st-comp-phrase & head-final &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.INIT - ].

subj-head-phrase := decl-head-subj-phrase & head-final &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS <! [ PRED "exist_q_rel" ] !> ].

head-comp-phrase := basic-head-1st-comp-phrase & head-initial &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD +vc &
                                   [ INIT + ],
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD [ NMZ -,
                                         FORM finite ] ].
