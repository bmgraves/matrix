;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of ccomp-illustr5-tgl
;;; created at:
;;;     Fri Jan 12 22:20:09 UTC 2018
;;; based on Matrix customization system version of:
;;;     unknown time
;;;
;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

+np :+ [ CASE case,
    CASE-MARKED bool ].

inflected :+ [ VERB-PC1-FLAG luk,
    VERB-PC2-FLAG luk ].

infl-satisfied :+ [ VERB-PC1-FLAG na-or-+,
    VERB-PC2-FLAG na-or-+ ].

basic-head-comp-phrase :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-opt-subj-phrase :+ [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

head :+ [ EXTRA bool ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Case

case := *top*.
foc := case.  ; foc
non-foc := case.
a_c := non-foc.
o_c := non-foc.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

noun-lex := basic-noun-lex & basic-one-arg & no-hcons-lex-item & non-mod-lex-item &
  [ ARG-ST < #spr >,
    SYNSEM.LOCAL.CAT.VAL [ COMPS < >,
                           SUBJ < >,
                           SPEC < >,
                           SPR < #spr &
                                 [ LOCAL.CAT.HEAD det,
                                   OPT + ] > ] ].

common-noun-lex := noun-lex.

pronoun-noun-lex := noun-lex.

;;; Verbs

verb-lex := basic-verb-lex & non-mod-lex-item &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPR < >,
                             SPEC < >,
                             SUBJ < #subj > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT cat-sat &
                               [ VAL [ SPR < >,
                                       COMPS < > ] ],
                           CONT.HOOK.INDEX #xarg ] ] ].

intransitive-verb-lex := verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST.FIRST.LOCAL.CAT.HEAD +np,
    INFLECTED.VERB-PC1-FLAG - ].

transitive-verb-lex := verb-lex & transitive-lex-item &
  [ ARG-ST < [ LOCAL.CAT.HEAD +np ],
             #comps &
             [ LOCAL.CAT cat-sat &
                         [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD +np ] ] >,
    INFLECTED.VERB-PC2-FLAG -,
    SYNSEM.LOCAL.CAT.VAL.COMPS < #comps &
                                 [ LOCAL.CAT.HEAD.EXTRA - ] > ].

clausal-verb-lex := verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD +np ],
             #comps &
             [ LOCAL.CAT.VAL [ SPR < >,
                               COMPS < >,
                               SUBJ < > ] ] > ].

clausal-a_c-foc-verb-lex := clausal-verb-lex &
  [ ARG-ST < [ LOCAL.CAT.HEAD +np &
                              [ CASE a_c ] ],
             [ LOCAL.CAT.HEAD noun &
                              [ CASE foc ] ] >,
    SYNSEM.LOCAL.CAT.VAL [ SUBJ < [ LOCAL.CAT.HEAD.CASE-MARKED + ] >,
                           COMPS < [ LOCAL.CAT.HEAD.CASE-MARKED + ] > ] ].

clausal-a_c-verb-lex := clausal-verb-lex &
  [ ARG-ST.FIRST.LOCAL.CAT.HEAD +np &
                                [ CASE a_c ],
    SYNSEM.LOCAL.CAT.VAL.SUBJ < [ LOCAL.CAT.HEAD.CASE-MARKED + ] > ].

verb1-verb-lex := intransitive-verb-lex.

verb2-verb-lex := transitive-verb-lex.

speech-clausal-verb-lex := clausal-verb-lex & clausal-second-arg-trans-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT.HEAD comp ] > ].

;;; Complementizers

comp-lex-item := raise-sem-lex-item & basic-one-arg &
  [ SYNSEM.LOCAL.CAT [ HEAD comp &
                            [ MOD < > ],
                       VAL [ SPR < >,
                             SUBJ < >,
                             COMPS < #comps > ] ],
    ARG-ST < #comps &
             [ LOCAL.CAT [ HEAD verb,
                           MC -,
                           VAL [ SUBJ < >,
                                 COMPS < > ] ] ] > ].

comps1-comp-lex-item := comp-lex-item.

;;; Others

;;; Case-marking adpositions
;;; Case marking adpositions are constrained not to
;;; be modifiers.

case-marking-adp-lex := basic-one-arg & raise-sem-lex-item &
  [ SYNSEM.LOCAL.CAT [ HEAD adp &
                            [ CASE #case,
                              MOD < > ],
                       VAL [ SPR < >,
                             SUBJ < >,
                             COMPS < #comps >,
                             SPEC < > ] ],
    ARG-ST < #comps &
             [ LOCAL.CAT [ VAL.SPR < >,
                           HEAD noun &
                                [ CASE #case,
                                  CASE-MARKED - ] ] ] > ].

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

;;; Lexical rule types

verb-pc1-lex-rule := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED [ VERB-PC1-FLAG +,
                VERB-PC2-FLAG #verb-pc2 ],
    DTR intransitive-verb-lex &
        [ INFLECTED.VERB-PC2-FLAG #verb-pc2 ],
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE foc,
                                                     CASE-MARKED + ] ].

verb-pc2-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED [ VERB-PC2-FLAG +,
                VERB-PC1-FLAG #verb-pc1 ],
    DTR transitive-verb-lex &
        [ INFLECTED.VERB-PC1-FLAG #verb-pc1 ] ].

verb-pc2_lrt1-lex-rule := verb-pc2-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD [ CASE o_c,
                                                      CASE-MARKED + ] ].

verb-pc2_lrt2-lex-rule := verb-pc2-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE a_c,
                                                     CASE-MARKED + ] ].

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

head-comp-phrase := basic-head-1st-comp-phrase & head-initial.

head-subj-phrase := decl-head-subj-phrase & head-initial.

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS <! [ PRED "exist_q_rel" ] !> ].
