;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of ccomp-illustr6-eng
;;; created at:
;;;     Mon Jan 15 20:03:04 UTC 2018
;;; based on Matrix customization system version of:
;;;     Mon Jan 15 19:55:00 UTC 2018
;;;
;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

+np :+ [ CASE case,
    CASE-MARKED bool ].

head :+ [ AUX bool,
    NMZ bool,
    FORM form ].

inflected :+ [ CASE-FLAG luk ].

infl-satisfied :+ [ CASE-FLAG na-or-+ ].

png :+ [ PER person ].

basic-head-comp-phrase :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-opt-subj-phrase :+ [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

cat :+ [ VC bool ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Case

case := *top*.
gen := case.  ; genitive
non-gen := case.
acc := non-gen.
nom := non-gen.

;;; Person

person := *top*.
1st := person.
2nd := person.
3rd := person.

;;; Form

form := *top*.
nonfinite := form.
finite := form.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

noun-lex := basic-noun-lex & basic-one-arg & no-hcons-lex-item & non-mod-lex-item &
  [ ARG-ST < #spr >,
    INFLECTED.CASE-FLAG -,
    SYNSEM.LOCAL.CAT [ VAL [ SPR < #spr &
                                   [ LOCAL.CAT.HEAD det ] >,
                             COMPS < >,
                             SUBJ < >,
                             SPEC < > ],
                       HEAD.NMZ -,
                       VC - ] ].

obl-spr-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPR < [ OPT - ] > ].

no-spr-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPR < [ OPT + ] > ].

; Nouns which cannot take specifiers mark their SPR requirement
; as OPT +.  Making the non-head daughter OPT - in this rule
; keeps such nouns out.
; 
; Rules for building NPs.  Note that the Matrix uses SPR for
; the specifier of nouns and SUBJ for the subject (specifier) of verbs.

head-spec-phrase := basic-head-spec-phrase & head-final &
  [ NON-HEAD-DTR.SYNSEM.OPT - ].

proper-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

common-noun-lex := obl-spr-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

;;; Verbs

verb-lex := non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT [ HEAD verb &
                            [ NMZ - ],
                       VC + ] ].

main-verb-lex := verb-lex & basic-verb-lex &
  [ SYNSEM.LOCAL [ CAT [ HEAD.AUX -,
                         VAL [ SPR < >,
                               SPEC < >,
                               SUBJ < #subj > ] ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT cat-sat &
                               [ VAL [ SPR < >,
                                       COMPS < > ] ],
                           CONT.HOOK.INDEX #xarg ] ] ].

aux-lex := verb-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.AUX + ].

intransitive-verb-lex := main-verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST.FIRST.LOCAL.CAT.HEAD +np ].

transitive-verb-lex := main-verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD +np ],
             #comps &
             [ LOCAL.CAT cat-sat &
                         [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD +np ] ] > ].

clausal-verb-lex := main-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD +np ],
             #comps &
             [ LOCAL.CAT.VAL [ SPR < >,
                               COMPS < >,
                               SUBJ < > ] ] > ].

nom-intransitive-verb-lex := intransitive-verb-lex &
  [ ARG-ST.FIRST.LOCAL.CAT.HEAD noun &
                                [ CASE nom ],
    SYNSEM.LOCAL.CAT.VAL.SUBJ < [ LOCAL.CAT.HEAD.CASE-MARKED + ] > ].

nom-acc-transitive-verb-lex := transitive-verb-lex &
  [ ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE nom ] ],
             [ LOCAL.CAT.HEAD noun &
                              [ CASE acc ] ] >,
    SYNSEM.LOCAL.CAT.VAL [ SUBJ < [ LOCAL.CAT.HEAD.CASE-MARKED + ] >,
                           COMPS < [ LOCAL.CAT.HEAD.CASE-MARKED + ] > ] ].

clausal-nom-verb-lex := clausal-verb-lex &
  [ ARG-ST.FIRST.LOCAL.CAT.HEAD noun &
                                [ CASE nom ],
    SYNSEM.LOCAL.CAT.VAL.SUBJ < [ LOCAL.CAT.HEAD.CASE-MARKED + ] > ].

clausal-nom-acc-verb-lex := clausal-verb-lex &
  [ ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE nom ] ],
             [ LOCAL.CAT.HEAD noun &
                              [ CASE acc ] ] >,
    SYNSEM.LOCAL.CAT.VAL [ SUBJ < [ LOCAL.CAT.HEAD.CASE-MARKED + ] >,
                           COMPS < [ LOCAL.CAT.HEAD.CASE-MARKED + ] > ] ].

intran-verb-lex := nom-intransitive-verb-lex.

tran-verb-lex := nom-acc-transitive-verb-lex.

thought-clausal-verb-lex := clausal-nom-verb-lex & clausal-second-arg-trans-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT.HEAD +vc &
                                                  [ NMZ -,
                                                    FORM finite ] ] > ].

perception-clausal-verb-lex := clausal-nom-acc-verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT.HEAD noun &
                                                  [ NMZ + ] ] > ].

;;; Auxiliaries

subj-raise-aux := aux-lex & trans-first-arg-raising-lex-item &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPR < >,
                             SPEC < >,
                             COMPS < #comps >,
                             SUBJ < #subj > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST < #subj &
             [ LOCAL [ CAT [ HEAD noun &
                                  [ CASE #case ],
                             VAL [ SUBJ < >,
                                   SPR < >,
                                   SPEC < >,
                                   COMPS < > ] ],
                       CONT.HOOK.INDEX #xarg ] ],
             #comps &
             [ LOCAL.CAT [ HEAD verb &
                                [ AUX - ],
                           VAL [ COMPS < >,
                                 SPR < >,
                                 SPEC < >,
                                 SUBJ < unexpressed &
                                        [ LOCAL.CAT.HEAD.CASE #case ] > ] ] ] > ].

subj-raise-aux-no-pred := subj-raise-aux & raise-sem-lex-item.

be-aux-lex := subj-raise-aux-no-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM nonfinite ].

;;; Complementizers

comp-lex-item := raise-sem-lex-item & basic-one-arg &
  [ SYNSEM.LOCAL.CAT [ VC -,
                       HEAD comp &
                            [ MOD < > ],
                       VAL [ SPR < >,
                             SUBJ < >,
                             COMPS < #comps > ] ],
    ARG-ST < #comps &
             [ LOCAL.CAT [ HEAD verb,
                           MC -,
                           VAL [ SUBJ < >,
                                 COMPS < > ] ] ] > ].

comps1-comp-lex-item := comp-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT.HEAD [ FORM finite,
                                                    NMZ - ] ] > ].

;;; Others

;;; Case-marking adpositions
;;; Case marking adpositions are constrained not to
;;; be modifiers.

case-marking-adp-lex := basic-one-arg & raise-sem-lex-item &
  [ SYNSEM.LOCAL.CAT [ HEAD adp &
                            [ CASE #case,
                              MOD < > ],
                       VAL [ SPR < >,
                             SUBJ < >,
                             COMPS < #comps >,
                             SPEC < > ] ],
    ARG-ST < #comps &
             [ LOCAL.CAT [ VAL.SPR < >,
                           HEAD noun &
                                [ CASE #case,
                                  CASE-MARKED - ] ] ] > ].

;;; Determiners
;;; SPEC is non-empty, and already specified by basic-determiner-lex.

determiner-lex := basic-determiner-lex & norm-zero-arg & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < >,
                           COMPS < >,
                           SUBJ < > ] ].

def-determiner-lex := determiner-lex & no-icons-lex-item.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

low-nmz-no-subjid-trans-lex-rule := low-nominalization-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL [ COMPS < [ LOCAL [ CAT [ HEAD +np,
                                                   VAL.SPR < > ],
                                             CONT.HOOK.INDEX #obj ] ] >,
                           SUBJ < [ LOCAL [ CAT [ HEAD +np,
                                                  VAL.SPR < > ],
                                            CONT.HOOK.INDEX #subj ] ] > ],
    DTR.SYNSEM.LOCAL.CAT.VAL [ COMPS < [ LOCAL.CONT.HOOK.INDEX #obj ] >,
                               SUBJ < [ LOCAL [ CAT.VAL.SPR < >,
                                                CONT.HOOK.INDEX #subj ] ] > ] ].

low-nominalization-lex-rule := cat-change-with-ccont-lex-rule &
  [ SYNSEM.LOCAL.CAT [ HEAD noun &
                            [ NMZ +,
                              MOD #mod ],
                       VAL [ SUBJ < [ LOCAL [ CAT.VAL.SPR < >,
                                              CONT.HOOK.INDEX #subj ] ] >,
                             SPEC #spec,
                             SPR < [ OPT + ] > ],
                       MC #mc,
                       MKG #mkg,
                       HC-LIGHT #hc-light,
                       POSTHEAD #posthead ],
    C-CONT [ RELS <! [ PRED "nominalized_rel",
                       LBL #ltop,
                       ARG0 ref-ind & #arg0,
                       ARG1 #arg1 ] !>,
             HCONS <! qeq &
                      [ HARG #arg1,
                        LARG #larg ] !>,
             HOOK [ INDEX #arg0,
                    LTOP #ltop ] ],
    DTR.SYNSEM.LOCAL [ CAT [ HEAD.MOD #mod,
                             VAL [ SUBJ < [ LOCAL.CONT.HOOK.INDEX #subj ] >,
                                   SPEC #spec ],
                             MC #mc,
                             MKG #mkg,
                             HC-LIGHT #hc-light,
                             POSTHEAD #posthead ],
                       CONT.HOOK.LTOP #larg ] ].

low-nmz-no-subjid-compsid-lex-rule := low-nominalization-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL [ COMPS #comps,
                           SUBJ < [ LOCAL [ CAT.VAL.SPR < >,
                                            CONT.HOOK.INDEX #subj ] ] > ],
    DTR.SYNSEM.LOCAL.CAT.VAL [ COMPS #comps,
                               SUBJ < [ LOCAL [ CAT.VAL.SPR < >,
                                                CONT.HOOK.INDEX #subj ] ] > ] ].

;;; Lexical rule types

case-lex-rule-super := add-only-no-ccont-rule &
  [ INFLECTED.CASE-FLAG +,
    DTR noun-lex ].

nom-acc-lex-rule := case-lex-rule-super & const-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE non-gen,
                            CASE-MARKED + ] ].

gen-lex-rule := case-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE gen,
                            CASE-MARKED + ] ].

case-synth-genitive-lex-rule := case-lex-rule-super & const-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE gen,
                            CASE-MARKED - ] ].

nmz-lex-rule-super := infl-lex-rule & low-nmz-no-subjid-trans-lex-rule &
  [ INFLECTED #infl,
    DTR verb-lex &
        [ INFLECTED #infl ] ].

low-lex-rule := nmz-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE gen,
                                                       CASE-MARKED + ],
                           COMPS.FIRST.LOCAL.CAT.HEAD [ CASE gen,
                                                        CASE-MARKED + ] ] ].

pernum-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR verb-lex &
        [ INFLECTED #infl ] ].

3sg-pres-lex-rule := pernum-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

form-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR verb-lex &
        [ INFLECTED #infl ] ].

nonfin-lex-rule := form-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD.FORM nonfinite ].

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

non-event-subj-head-phrase := basic-head-subj-phrase & head-final &
  [ NON-HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.SPR < >,
    HEAD-DTR.SYNSEM [ NON-LOCAL [ QUE 0-dlist,
                                  REL 0-dlist ],
                      LOCAL [ CONT.HOOK.INDEX ref-ind,
                              CAT.VAL.COMPS < > ] ] ].

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

head-comp-phrase := basic-head-1st-comp-phrase & head-initial.

subj-head-phrase := decl-head-subj-phrase & head-final &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS <! [ PRED "exist_q_rel" ] !> ].

basic-unary-phrase :+ [ SYNSEM.LOCAL.CAT.VC #vc,
    ARGS.FIRST.SYNSEM.LOCAL.CAT.VC #vc ].

basic-binary-headed-phrase :+ [ SYNSEM.LOCAL.CAT.VC #vc,
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.VC #vc ].

verb-cluster-phrase := head-final &
  [ SYNSEM.LOCAL.CAT [ VC +,
                       MC #mc & - ],
    HEAD-DTR.SYNSEM.LOCAL.CAT [ VC +,
                                MC #mc ],
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.VC + ].

vc-comp-head-phrase := verb-cluster-phrase & basic-head-1st-comp-phrase.

basic-head-spec-phrase :+ [ SYNSEM.LOCAL.CAT.VC #vc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.VC #vc ].
