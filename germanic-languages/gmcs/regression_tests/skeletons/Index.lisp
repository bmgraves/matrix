;;;
;;; this file should be `Index.lisp' and reside in the directory containing the
;;; tsdb(1) test suite skeleton databases (typically a subdirectory `skeletons'
;;; in the tsdb(1) database root directory `*tsdb-home*').
;;;
;;; the file should contain a single un-quote()d Common-Lisp list enumerating
;;; the available skeletons, e.g.
;;;
;;;   (((:path . "english") (:content . "English TSNLP test suite"))
;;;    ((:path . "csli") (:content . "CSLI (ERGO) test suite"))
;;;    ((:path . "vm") (:content . "English VerbMobil data")))
;;;
;;; where the individual entries are assoc() lists with at least two elements:
;;;
;;;   - :path --- the (relative) directory name containing the skeleton;
;;;   - :content --- a descriptive comment.
;;;
;;; the order of entries is irrelevant as the `tsdb :skeletons' command sorts
;;; the list lexicographically before output.
;;;

(
((:path . "tiniest") (:content . "tiniest: A very basic grammar just to get the regression tests started.  SOV word order, no frills."))
 ;;; new-regression-test-here
((:path . "dutch-auxrule-compl") (:content . "dutch-auxrule-compl: acl test of dutch grammar using auxrule, complete test set."))
((:path . "dutch-argcomp-compl") (:content . "dutch-argcomp-compl: acl test of dutch grammar using argument composition, complete test set."))
((:path . "german-auxrule-compl") (:content . "german-auxrule-compl: acl test of dutch grammar using auxrule, complete test set."))
((:path . "german-argcomp-compl") (:content . "german-argcomp-compl: acl test of dutch grammar using argument composition, complete test set."))
((:path . "neg-aux-min") (:content . "neg-aux-min: scope of negation for negative auxiliary verbs. uses minimal grammar augmented with some choices for auxiliaries"))
((:path . "bipartite-stems") (:content . "bipartite-stems: Basic test cases for bipartite stems, based on mini-English"))
((:path . "morphotactics-impl-expl-disjunction") (:content . "morphotactics-impl-expl-disjunction: Models and tests both implicit and explicit non-sequential disjunctions, and an explicit sequential disjunction."))
((:path . "morphotactics-lrt-inputs") (:content . "morphotactics-lrt-inputs: Tests inputs and constraints using hierarchies (trees and multiple inheritance) of lexical rule types."))
((:path . "morphotactics-req-fbd") (:content . "morphotactics-req-fbd: Tests forwards and backwards require, and (backward) forbid, morphotactic co-occurrence restrictions on an input graph with both conjunction and disjunction."))
((:path . "morphotactics-opt-oblig-single-input") (:content . "morphotactics-opt-oblig-single-input: Tests simple morphotactics with position classes having only 1 input. Also tests that obligatory PCs arequired by the lexical types they take as input."))
((:path . "bipartite-stems") (:content . "bipartite-stems: Basic test cases for bipartite stems, based on mini-English"))
((:path . "morphotactics-impl-expl-disjunction") (:content . "morphotactics-impl-expl-disjunction: Models and tests both implicit and explicit non-sequential disjunctions, and an explicit sequential disjunction."))
((:path . "morphotactics-lrt-inputs") (:content . "morphotactics-lrt-inputs: Tests inputs and constraints using hierarchies (trees and multiple inheritance) of lexical rule types."))
((:path . "morphotactics-req-fbd") (:content . "morphotactics-req-fbd: Tests forwards and backwards require, and (backward) forbid, morphotactic co-occurrence restrictions on an input graph with both conjunction and disjunction."))
((:path . "morphotactics-opt-oblig-single-input") (:content . "morphotactics-opt-oblig-single-input: Tests simple morphotactics with position classes having only 1 input. Also tests that obligatory PCs arequired by the lexical types they take as input."))
((:path . "mood-buildhierarchy") (:content . "mood-buildhierarchy: testing the build your own mood hierarchy"))
((:path . "asp-mood-contrast-options") (:content . "asp-mood-contrast-options: tests options to add simple imper/perf and subj/ind hierarchies"))
((:path . "subj-v-inv-obj-drop") (:content . "subj-v-inv-obj-drop: Testing interaction of subj-v inversion and object drop, as well as interaction of subj-v intersion and FORM and AUX features."))
((:path . "eng-qpart-inf") (:content . "eng-qpart-inf: Testing interaction of non-finite form and question particle.  Question particle should now only attach to finite sentences."))
((:path . "arg-opt-lex-comps-drop-np-wth-drop-np-wthout") (:content . "arg-opt-lex-comps-drop-np-wth-drop-np-wthout: slexically based complement dropping.  marker is not permitted for dropped or overt objects"))
((:path . "arg-opt-lex-subj-drop-marker-req-wth-drop-opt-wthout") (:content . "arg-opt-lex-subj-drop-marker-req-wth-drop-opt-wthout: lexically based subject dropping. marker is required for a dropped subject and optinal for a overt subject"))
((:path . "arg-opt-lex-subj-drop-marker-req-wth-drop-np-wthout") (:content . "arg-opt-lex-subj-drop-marker-req-wth-drop-np-wthout: lexically based subject dropping. mmareker is required with a dropped subject and not permitted with an overt subject"))
((:path . "arg-opt-lex-subj-drop-marker-opt-wth-drop-req-wthout") (:content . "arg-opt-lex-subj-drop-marker-opt-wth-drop-req-wthout: lexically based subject dropping. marker is required with a dropped subject and required with an overt subject"))
((:path . "arg-opt-lex-subj-drop-marker-opt-wth-drop-opt-wthout") (:content . "arg-opt-lex-subj-drop-marker-opt-wth-drop-opt-wthout: lexically based subject drop. marker is optional witha dropped subject and optiona l with an overt subject"))
((:path . "arg-opt-lex-subj-drop-marker-opt-wth-drop-np-wthout") (:content . "arg-opt-lex-subj-drop-marker-opt-wth-drop-np-wthout: lexically based subject dropping. maker is optional with drop and onot permitted with overt subject"))
((:path . "arg-opt-lex-subj-drop-marker-np-wth-drop-req-wthout") (:content . "arg-opt-lex-subj-drop-marker-np-wth-drop-req-wthout: lexically based subject dropping. subject marker is re not permitted with an dropped subject and required with an overt subject."))
((:path . "arg-opt-lex-subj-drop-marker-np-wth-drop-opt-wthout") (:content . "arg-opt-lex-subj-drop-marker-np-wth-drop-opt-wthout: subject dropping.lexically based. marker is not permitted when subject is dropped and is optional when it is overt"))
((:path . "arg-opt-lex-comps-drop-marker-req-wth-drop-req-wthout") (:content . "arg-opt-lex-comps-drop-marker-req-wth-drop-req-wthout: marker is required with a dropped object and required with an overt object. lexically based."))
((:path . "arg-opt-lex-comps-drop-marker-req-wth-drop-opt-wthout") (:content . "arg-opt-lex-comps-drop-marker-req-wth-drop-opt-wthout: marker is required with an ovdropped object and optional with an overt object. lexically based"))
((:path . "arg-opt-lex-comps-drop-marker-req-wth-drop-np-wthout") (:content . "arg-opt-lex-comps-drop-marker-req-wth-drop-np-wthout: marker is required wihen an object is dropped and not permitted with an overt object. lexically based"))
((:path . "arg-opt-lex-comps-drop-marker-opt-wth-drop-req-wthout") (:content . "arg-opt-lex-comps-drop-marker-opt-wth-drop-req-wthout: marker is optional with a dropped object and required with an overt object. lecixically based"))
((:path . "arg-opt-lex-comps-drop-marker-opt-wth-drop-opt-wthout") (:content . "arg-opt-lex-comps-drop-marker-opt-wth-drop-opt-wthout: marker is optional for both dropped and overt objects.  lexically based"))
((:path . "arg-opt-lex-comps-drop-marker-opt-wth-drop-np-wthout") (:content . "arg-opt-lex-comps-drop-marker-opt-wth-drop-np-wthout: markerop optional with dropped object and not permitted with overt object. lexically based"))
((:path . "arg-opt-lex-comps-drop-marker-np-wth-drop-req-wthout") (:content . "arg-opt-lex-comps-drop-marker-np-wth-drop-req-wthout: Marker not permitted with dropped object and required with an overt object. Lexically based."))
((:path . "arg-opt-lex-comps-drop-marker-np-wth-drop-opt-wthout") (:content . "arg-opt-lex-comps-drop-marker-np-wth-drop-opt-wthout: Markers are not permitted if the object is dropped and optional if it is overt.  Lexically Ba[D[D[A[D"))
((:path . "infl-q-nonfinal-suffix") (:content . "infl-q-nonfinal-suffix: Question affix as non-final in suffix string."))
((:path . "infl-q-final-opt-suffix") (:content . "infl-q-final-opt-suffix: Question inflection as optional suffix after one other suffix"))
((:path . "infl-q-aux-verb") (:content . "infl-q-aux-verb: Questions as inflection on aux verbs."))
((:path . "infl-q-main-verb-prefix") (:content . "infl-q-main-verb-prefix: Questions as prefix on main verbs."))
((:path . "infl-q-main-verb") (:content . "infl-q-main-verb: Question marking as inflection on the main verb, no other affixes"))
((:path . "subj-aux-inv-q") (:content . "subj-aux-inv-q: Questions marked by subj-aux inversion."))
((:path . "qpart-yes-no") (:content . "qpart-yes-no: Questions marked via sentence-initial question particle."))
((:path . "infl-neg-sole-suffix") (:content . "infl-neg-sole-suffix: Negation as the only suffix, optional"))
((:path . "infl-neg-nonfinal-suffix") (:content . "infl-neg-nonfinal-suffix: Inflectional negation as optional non-final suffix, optionality with check box"))
((:path . "infl-neg-final-opt-suffix") (:content . "infl-neg-final-opt-suffix: Negative affix as optional suffix at end of suffix string"))
((:path . "Sahaptin-short") (:content . "Sahaptin-short: Sahaptin, shorter version (sfd dissertation)"))
((:path . "Sahaptin") (:content . "Sahaptin: Sahaptin (sfd dissertation)"))
((:path . "case-mixed2") (:content . "case-mixed2: mixed adpositional and morphological marking (2)"))
((:path . "Tagalog") (:content . "Tagalog: Tagalog (sfd dissertation)"))
((:path . "Hindi") (:content . "Hindi: Hindi (sfd dissertation)"))
((:path . "German") (:content . "German: German (sfd dissertation)"))
((:path . "Fore") (:content . "Fore: Fore (sfd dissertation)"))
((:path . "Dyirbal") (:content . "Dyirbal: Dyirbal (sfd dissertation)"))
((:path . "Cree") (:content . "Cree: Plains Cree (sfd dissertation)"))
((:path . "arg-opt-lex-cntxt-2feat-subj-drop-marker-req-wth-drop-req-wthout") (:content . "arg-opt-lex-cntxt-2feat-subj-drop-marker-req-wth-drop-req-wthout: Subject dropping only in one context with multiple features.  One specified on the verb.  One on the subj."))
((:path . "arg-opt-lex-cntxt-subj-drop-marker-req-wth-drop-req-wthout") (:content . "arg-opt-lex-cntxt-subj-drop-marker-req-wth-drop-req-wthout: Subject dropping according to one context with one feature specified on the verb."))
((:path . "arg-opt-lex-subj-drop-marker-req-wth-drop-req-wthout") (:content . "arg-opt-lex-subj-drop-marker-req-wth-drop-req-wthout: Lexically based subject dropping. Marker required for dropped and overt subjs."))
((:path . "arg-opt-lex-subj-drop-no-marker") (:content . "arg-opt-lex-subj-drop-no-marker: Lexical based subject dropping. No marker."))
((:path . "arg-opt-all-subj-drop-marker-req-wth-drop-req-wthout") (:content . "arg-opt-all-subj-drop-marker-req-wth-drop-req-wthout: Subject dropping for all verb types. Marker required for both dropped and overt subjects"))
((:path . "arg-opt-all-subj-drop-marker-req-wth-drop-opt-wthout") (:content . "arg-opt-all-subj-drop-marker-req-wth-drop-opt-wthout: Subject dropping allowed for all verb types.  Marker req for drop and opt for overt subj."))
((:path . "arg-opt-all-subj-drop-marker-req-wth-drop-np-wthout") (:content . "arg-opt-all-subj-drop-marker-req-wth-drop-np-wthout: Subject dropping allowed for all verb types. Marker required for drop and not permitted with overt subj."))
((:path . "arg-opt-all-subj-drop-marker-opt-wth-drop-req-wthout") (:content . "arg-opt-all-subj-drop-marker-opt-wth-drop-req-wthout: Subject dropping allowed for all verb types. Marker opt for dropped subj and req for overt subj."))
((:path . "arg-opt-all-subj-drop-marker-opt-wth-drop-opt-wthout") (:content . "arg-opt-all-subj-drop-marker-opt-wth-drop-opt-wthout: Subject dropping allowed for al verb types. Marker optional for both dropped and overt subjects."))
((:path . "arg-opt-all-subj-drop-marker-opt-wth-drop-np-wthout") (:content . "arg-opt-all-subj-drop-marker-opt-wth-drop-np-wthout: Subject dropping for all verb types. Marker optional with drop and not permitted with overt subj."))
((:path . "arg-opt-all-subj-drop-marker-np-wth-drop-req-wthout") (:content . "arg-opt-all-subj-drop-marker-np-wth-drop-req-wthout: Subject dropping for all verb types. Marker not permitted with dropped subj and req with overt arg."))
((:path . "arg-opt-all-subj-drop-marker-np-wth-drop-opt-wthout") (:content . "arg-opt-all-subj-drop-marker-np-wth-drop-opt-wthout: Subject dropping is allowed for all verb types.  A marker is not permitted with a dropped subject and is optional with an overt one.  Object dropping is not allowed."))
((:path . "arg-opt-all-comps-drop-marker-opt-wth-drop-req-wthout") (:content . "Object dropping for all verb types.  Marker is optional for dropped objects and required for overt objects."))
((:path . "arg-opt-all-comps-drop-marker-np-wth-drop-opt-wthout") (:content . "Object dropping is allowed for all verb types. A marker is not permitted with dropped arguments and is optional for overt."))
((:path . "arg-opt-all-comps-drop-marker-np-wth-drop-req-wthout") (:content . "Object dropping is allowed for all verb types.  A marker is required with overt arguments and not permitted with dropped arguments."))
((:path . "arg-opt-all-comps-drop-marker-opt-wth-drop-np-wthout") (:content . "Object dropping is allowed for all verb types and a marker is optional if the object is dropped and not permitted if it is overt."))
((:path . "arg-opt-all-comps-drop-marker-opt-wth-drop-opt-wthout") (:content . "Object dropping is allowed for verb types and object marking is optional when for dropped and overt objects."))
((:path . "arg-opt-all-comps-drop-marker-req-wth-drop-np-wthout") (:content . "Object dropping is allowed for all verbs and an object marker is required when the object is dropped and not permitted with an overt object."))
((:path . "arg-opt-all-comps-drop-marker-req-wth-drop-req-wthout") (:content . "Object dropping is allowed for all verbs and a marker is required when objects are dropped and when they are not."))
((:path . "arg-opt-all-comps-drop-marker-req-wth-drop-opt-wthout") (:content . "Object dropping allowed for all verbs.  Marker is required for dropping and optional otherwise."))
((:path . "arg-opt-all-comps-drop-wth-no-marker") (:content . "All complements can be dropped. No marker."))
((:path . "all-subj-drop-wth-opt-marker") (:content . "Subject dropping for all verbs with a marker left optionally for both dropped and overt subjects"))
((:path . "all-subj-drop-wth-req-marker") (:content . "All subject droppiuired marker for both dropped and overt subjects.  No object dropping."))
((:path . "lex-subj-drop") (:content . "Lexical subject dropping with no marker.  No object dropping"))
((:path . "subj-drop") (:content . "All subjects caobjects can be dropped.  No markers for subject dropping."))
((:path . "auxfeatures-onlyformmarked") (:content . "auxfeatures-onlyformmarked: testing features on the auxiliaryFORM marked on the complement verb"))
((:path . "compfeatures-onlyformmarked") (:content . "compfeatures-onlyformmarked: testing features on auxiliary complement but only FORM is marked on the verb"))
((:path . "compfeatures") (:content . "compfeatures: testing features on the auxiliary complement"))
((:path . "auxfeatures") (:content . "auxfeatures: testing features on auxiliary verb"))
((:path . "case-optadp") (:content . "case-optadp: case with optional adpositional marking"))
((:path . "case-mixed-optadp") (:content . "case-mixed-optadp: case with mixed optional adpositional and morphological marking"))
((:path . "case-mixed") (:content . "case-mixed: case, mixed adpositional and morphological marking"))
((:path . "Finnish") (:content . "Finnish: Finnish test for morphotactics"))
((:path . "Slave") (:content . "Slave: Slave test for morphotactics"))
((:path . "Zulu") (:content . "Zulu: Zulu test for morphotactics"))
((:path . "pre-vp-adv-neg") (:content . "pre-vp-adv-neg: Negation as independent pre-VP modifier"))
((:path . "mini-infl-neg") (:content . "mini-infl-neg: Negation as inflection, simple case"))
((:path . "test-stative") (:content . "test-stative: testing assignment of prog-asp to non-stative-ing comp, ignoring tense/person/number/spelling, only transitive"))
((:path . "view-situ-aspect-infl") (:content . "view-situ-aspect-infl: situation and viewpoint aspect as inflection"))
((:path . "view-inf-situ-inher") (:content . "view-inf-situ-inher: inflected viewpoint and inherent situation aspect"))
((:path . "free-one-aux-max-v") (:content . "free-one-aux-max-v: tests free word order with no verbal clusters, thus maximum one aux"))
((:path . "vso-aux-before-v-no-cluster") (:content . "vso-aux-before-v-no-cluster: test vso word order where aux precedes its v-complement and does not form a verbal cluster"))
((:path . "vso-aux-before-v-cluster") (:content . "vso-aux-before-v-cluster: testing vso word order where the aux precedes its v-comp forming a verbal cluster"))
((:path . "vso-aux-after-v") (:content . "vso-aux-after-v: testing vso word order where the auxiliary follows its v-complement"))
((:path . "v-initial-aux-before-v") (:content . "v-initial-aux-before-v: testing v-initial word order with aux preceding its v-complement"))
((:path . "v-initial-aux-after-v") (:content . "v-initial-aux-after-v: testing v-initial word order when the auxiliary follows its v-complement"))
((:path . "v-initial-aux-before-vp") (:content . "v-initial-aux-before-vp: testing v-initial word order where the auxiliary precedes its vp complement"))
((:path . "v-initial-aux-after-vp") (:content . "v-initial-aux-after-vp: testing v-initial word order with auxiliaries following their vp-complement"))
((:path . "svo-aux-before-v") (:content . "svo-aux-before-v: testing svo word order with auxiliary preceding v-comp"))
((:path . "svo-aux-after-v") (:content . "svo-aux-after-v: testing svo word order with aux following its v-complement"))
((:path . "sov-aux-before-v") (:content . "sov-aux-before-v: testing sov word order with auxiliaries preceding their v-comp"))
((:path . "sov-aux-after-v") (:content . "sov-aux-after-v: testing sov word order where auxiliaries precede v-comp"))
((:path . "free-aux-before-v-cluster") (:content . "free-aux-before-v-cluster: testing free word order with preceding auxiliaries that take a v-comp and form a v-cluster"))
((:path . "free-aux-after-v-cluster") (:content . "free-aux-after-v-cluster: testing free word order where the aux follows its vcomp and forms verbal clusters"))
((:path . "vso-aux-before-vp") (:content . "vso-aux-before-vp: testing vso word order where auxiliary precedes main-verb and takes vso complement style Irish and Welsh"))
((:path . "multi-featured-aux") (:content . "multi-featured-aux: very! short test of features on the auxiliary itself"))
((:path . "free-aux-before-vp") (:content . "free-aux-before-vp: testing free word order with auxiliary that needs to come before its verbal complements"))
((:path . "free-aux-after-vp") (:content . "free-aux-after-vp: testing word order with auxiliaries following their vp-compl, else free word order"))
((:path . "vos-aux-after-vp") (:content . "vos-aux-after-vp: testing word order for vos languages in which the auxiliary follows its vp complement"))
((:path . "vos-aux-before-vp") (:content . "vos-aux-before-vp: testing word order for vos languages with auxiliaries preceding their vp complement"))
((:path . "ovs-aux-before-vp") (:content . "ovs-aux-before-vp: tests word order ovs with auxiliaries that precede their vp complement"))
((:path . "ovs-aux-after-vp") (:content . "ovs-aux-after-vp: testing ovs word order with auxiliaries that follow their vp complement"))
((:path . "aux-assigns-subj-case-vp") (:content . "aux-assigns-subj-case-vp: grammar tests case restrictions imposed by auxiliary: here the auxiliary aentence"))
((:path . "vos-vp-aux-case-rais") (:content . "vos-vp-aux-case-rais: testing case constraints imposed by the auxiliary: here it raises the case value from its vcomp's subject"))
((:path . "v2-aux-eitherside-vp") (:content . "v2-aux-eitherside-vp: v2nd word order with one auxiliary that takes a vp complement on either side"))
((:path . "v2-aux-eitherside-v") (:content . "v2-aux-eitherside-v: v2nd word order with one auxiliary that takes a v (not vp) complement which can appear freely on either side ofthe aux"))
((:path . "multi-select-case") (:content . "multi-select-case: multi-select of feature values, namely case"))
((:path . "nf-twoforms-withtwoaux-vp-1008") (:content . "nf-twoforms-withtwoaux-vp-1008: testing-- two nonfinite forms"))
((:path . "nf-form-withaux-vp-1008") (:content . "nf-form-withaux-vp-1008: testing nonfinite form constraint for aux complement"))
((:path . "fin-forms-noaux-1008") (:content . "fin-forms-noaux-1008: testing finite/nonfinite distinction when there are no auxiliaries"))
((:path . "auxcomp-markfeature-vp-1015") (:content . "auxcomp-markfeature-vp-1015: testing KEYS.KEY mhat is being used to distinguish etre and avoir type auxiliary verb classes"))
((:path . "auxcomp-feature-engstative-vp-1013") (:content . "auxcomp-feature-engstative-vp-1013: testing verb class feature stative and aux constrained to nonstative"))
((:path . "noaux-toblig-aopt-onv") (:content . "noaux-toblig-aopt-onv: obligatory tense, optional aspect on v, no aux level 3 test"))
((:path . "auxten-vpcompnfasp-tafeat") (:content . "auxten-vpcompnfasp-tafeat: tensed auxilialevel 3 test"))
((:path . "nopaux-noinfl-vpcomp-f-formfeat") (:content . "nopaux-noinfl-vpcomp-f-formfeat: single uninflected aux with finite vp complement, level 2 test (inflection but no t&a features)"))
((:path . "aux-f-vpcomp-nfconst-formfeat") (:content . "aux-f-vpcomp-nfconst-formfeat: finite auxes with nf vp compleof the nf comp is constrained - level 2 test (inflection, no t&a features)"))
((:path . "aux-v-f-noinfl") (:content . "aux-v-f-noinfl: two aux, finite v vomp, no inflection, level 1 test"))
((:path . "aux-vp-f-noinfl") (:content . "aux-vp-f-noinfl: two aux, finite vp comp, no inflection, level 1 test"))
((:path . "aux-s-f-noinfl") (:content . "aux-s-f-noinfl: two aux, finite sentential compelement, no inflection, level1 test"))
((:path . "testingcompforms") (:content . "testingcompforms: small ts - known problems"))
((:path . "dir-inv-fore") (:content . "dir-inv-fore: Direct-inverse, pseudo-Fore"))
((:path . "dir-inv-algonquian") (:content . "dir-inv-algonquian: Direct-inverse, pseudo-Algonquian"))
((:path . "case-tripartite") (:content . "case-tripartite: Case, tripartite"))
((:path . "case-split-v") (:content . "case-split-v: Case, split-V"))
((:path . "case-split-s") (:content . "case-split-s: Case, split-S"))
((:path . "case-split-n") (:content . "case-split-n: Case, split-N"))
((:path . "case-none") (:content . "case-none: Case, none"))
((:path . "case-nom-acc-adp") (:content . "case-nom-acc-adp: Case, nominative-accusative w/ adpositions"))
((:path . "case-nom-acc") (:content . "case-nom-acc: Case, nominative-accusative"))
((:path . "case-focus") (:content . "case-focus: Case, focus"))
((:path . "case-fluid-s") (:content . "case-fluid-s: Case, fluid-S"))
((:path . "case-erg-abs") (:content . "case-erg-abs: Case, ergative-absolutive"))
 )
