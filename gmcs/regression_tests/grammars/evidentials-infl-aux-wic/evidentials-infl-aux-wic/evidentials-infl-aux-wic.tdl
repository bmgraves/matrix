;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of evidentials-infl-aux-wic
;;; created at:
;;;     Tue Jan 23 00:22:21 UTC 2018
;;; based on Matrix customization system version of:
;;;     unknown time
;;;
;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

head :+ [ AUX bool,
    FORM form ].

inflected :+ [ ASP-OR-OBJECT-FLAG luk,
    ASP-OR-TENSE-ASPECT-FLAG luk,
    ASP-OR-SUBJECT-FLAG luk ].

infl-satisfied :+ [ ASP-OR-OBJECT-FLAG na-or-+,
    ASP-OR-TENSE-ASPECT-FLAG na-or-+,
    ASP-OR-SUBJECT-FLAG na-or-+ ].

png :+ [ PER person ].

basic-head-comp-phrase :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-mod-phrase-simple :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-opt-subj-phrase :+ [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Person

person := *top*.
1st := person.
2nd := person.
3rd := person.

;;; Form

form := *top*.
nonfinite := form.
finite := form.

;;; Tense

past := tense.
future := tense.

;;; Aspect

perfective := aspect.
durative := aspect.
imperfective := aspect.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

noun-lex := basic-noun-lex & basic-one-arg & no-hcons-lex-item & non-mod-lex-item &
  [ ARG-ST < #spr >,
    SYNSEM.LOCAL.CAT.VAL [ COMPS < >,
                           SUBJ < >,
                           SPEC < >,
                           SPR < #spr &
                                 [ LOCAL.CAT.HEAD det,
                                   OPT + ] > ] ].

common-noun-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

;;; Verbs

verb-lex := non-mod-lex-item & quot-rule-dtr & subject-rule-dtr & tense-aspect-rule-dtr &
  [ SYNSEM.LOCAL.CAT.HEAD verb,
    INFLECTED [ ASP-OR-OBJECT-FLAG -,
                ASP-OR-SUBJECT-FLAG -,
                ASP-OR-TENSE-ASPECT-FLAG - ] ].

main-verb-lex := verb-lex & basic-verb-lex &
  [ SYNSEM.LOCAL [ CAT [ HEAD.AUX -,
                         VAL [ SPR < >,
                               SPEC < >,
                               SUBJ < #subj > ] ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT cat-sat &
                               [ VAL [ SPR < >,
                                       COMPS < > ] ],
                           CONT.HOOK.INDEX #xarg ] ] ].

aux-lex := verb-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.AUX + ].

intransitive-verb-lex := main-verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST.FIRST.LOCAL.CAT.HEAD noun ].

transitive-verb-lex := main-verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT cat-sat &
                         [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] > ].

tr-verb-verb-lex := transitive-verb-lex.

;;; Auxiliaries

subj-raise-aux := aux-lex & trans-first-arg-raising-lex-item &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPR < >,
                             SPEC < >,
                             COMPS < #comps >,
                             SUBJ < #subj > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST < #subj &
             [ LOCAL [ CAT [ HEAD noun,
                             VAL [ SUBJ < >,
                                   SPR < >,
                                   SPEC < >,
                                   COMPS < > ] ],
                       CONT.HOOK.INDEX #xarg ] ],
             #comps &
             [ LOCAL.CAT [ VAL [ SUBJ < unexpressed >,
                                 COMPS < >,
                                 SPR < >,
                                 SPEC < > ],
                           HEAD verb &
                                [ AUX - ] ] ] > ].

subj-raise-aux-with-pred := subj-raise-aux & norm-sem-lex-item & trans-first-arg-raising-lex-item-1.

infr-aux-lex := subj-raise-aux-with-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ].

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

;;; Intermediate rule types

quot-rule-dtr := word-or-lexrule.
tense-aspect-rule-dtr := word-or-lexrule.
subject-rule-dtr := word-or-lexrule.

;;; Lexical rule types

object-lex-rule-super := add-only-no-ccont-rule & quot-rule-dtr & subject-rule-dtr & tense-aspect-rule-dtr &
  [ INFLECTED [ ASP-OR-OBJECT-FLAG +,
                ASP-OR-TENSE-ASPECT-FLAG #asp-or-tense-aspect,
                ASP-OR-SUBJECT-FLAG #asp-or-subject ],
    DTR verb-lex &
        [ INFLECTED [ ASP-OR-TENSE-ASPECT-FLAG #asp-or-tense-aspect,
                      ASP-OR-SUBJECT-FLAG #asp-or-subject ] ] ].

1obj-lex-rule := infl-lex-rule & object-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 1st ].

2obj-lex-rule := infl-lex-rule & object-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 2nd ].

3obj-lex-rule := const-lex-rule & object-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

subject-lex-rule-super := add-only-no-ccont-rule & quot-rule-dtr & tense-aspect-rule-dtr &
  [ INFLECTED [ ASP-OR-SUBJECT-FLAG +,
                ASP-OR-OBJECT-FLAG #asp-or-object,
                ASP-OR-TENSE-ASPECT-FLAG #asp-or-tense-aspect ],
    DTR subject-rule-dtr &
        [ INFLECTED [ ASP-OR-OBJECT-FLAG #asp-or-object,
                      ASP-OR-TENSE-ASPECT-FLAG #asp-or-tense-aspect ] ] ].

1subj-lex-rule := infl-lex-rule & subject-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 1st ].

2subj-lex-rule := infl-lex-rule & subject-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 2nd ].

3subj-lex-rule := const-lex-rule & subject-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

quot-lex-rule-super := cont-change-only-lex-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR quot-rule-dtr &
        [ INFLECTED #infl ] ].

evidential-lex-rule := cont-change-only-lex-rule & same-spr-lex-rule & same-spec-lex-rule &
  [ C-CONT [ RELS <! event-relation &
                     [ LBL #ltop,
                       ARG0 event,
                       ARG1 #harg ] !>,
             HCONS <! qeq &
                      [ HARG #harg,
                        LARG #larg ] !>,
             HOOK [ LTOP #ltop,
                    INDEX #mainev,
                    XARG #mainagent ] ],
    DTR.SYNSEM.LOCAL.CONT.HOOK [ LTOP #larg,
                                 XARG #mainagent,
                                 INDEX #mainev ] ].

nonfirsthand-evidential-lex-rule := evidential-lex-rule &
  [ C-CONT.RELS <! [ PRED "ev_nonfirsthand_rel" ] !> ].

nf-lex-rule := nonfirsthand-evidential-lex-rule & quot-lex-rule-super.

tense-aspect-lex-rule-super := cont-change-only-lex-rule & infl-lex-rule & quot-rule-dtr &
  [ INFLECTED [ ASP-OR-TENSE-ASPECT-FLAG +,
                ASP-OR-OBJECT-FLAG #asp-or-object,
                ASP-OR-SUBJECT-FLAG #asp-or-subject ],
    DTR tense-aspect-rule-dtr &
        [ INFLECTED [ ASP-OR-OBJECT-FLAG #asp-or-object,
                      ASP-OR-SUBJECT-FLAG #asp-or-subject ] ] ].

fut-quot-lex-rule := nonfirsthand-evidential-lex-rule & tense-aspect-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE future ].

dur-lex-rule := add-only-no-ccont-rule & tense-aspect-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT durative ].

rec-past-lex-rule := add-only-no-ccont-rule & tense-aspect-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E [ TENSE past,
                                     ASPECT perfective ] ].

asp-lex-rule-super := add-only-no-ccont-rule &
  [ INFLECTED [ ASP-OR-OBJECT-FLAG +,
                ASP-OR-SUBJECT-FLAG +,
                ASP-OR-TENSE-ASPECT-FLAG + ],
    DTR verb-lex ].

perf-lex-rule := asp-lex-rule-super & const-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT perfective ].

asp_lrt2-lex-rule := asp-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT imperfective ].

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

head-comp-phrase := basic-head-1st-comp-phrase & head-initial.

subj-head-phrase := decl-head-subj-phrase & head-final &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS <! [ PRED "exist_q_rel" ] !> ].
