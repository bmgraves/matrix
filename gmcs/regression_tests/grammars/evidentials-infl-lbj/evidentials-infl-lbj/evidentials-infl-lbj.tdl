;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of evidentials-infl-lbj
;;; created at:
;;;     Wed Jan 24 04:56:52 UTC 2018
;;; based on Matrix customization system version of:
;;;     unknown time
;;;
;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

noun :+ [ CASE case ].

inflected :+ [ REPORT-FLAG luk,
    EXPER-OR-OBS-FLAG luk,
    CASE-FLAG luk ].

infl-satisfied :+ [ REPORT-FLAG na-or-+,
    EXPER-OR-OBS-FLAG na-or-+,
    CASE-FLAG na-or-+ ].

basic-head-comp-phrase :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-opt-subj-phrase :+ [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Case

case := *top*.
erg := case.  ; ergative
dir := case.  ; direct

;;; Tense

nonpast := tense.
past := tense.

;;; Aspect

continuous := aspect.
perfect := aspect.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

noun-lex := basic-noun-lex & basic-one-arg & no-hcons-lex-item & non-mod-lex-item &
  [ ARG-ST < #spr >,
    SYNSEM.LOCAL.CAT.VAL [ COMPS < >,
                           SUBJ < >,
                           SPEC < >,
                           SPR < #spr &
                                 [ LOCAL.CAT.HEAD det,
                                   OPT + ] > ],
    INFLECTED.CASE-FLAG - ].

common-noun-noun-lex := noun-lex.

;;; Verbs

verb-lex := basic-verb-lex & non-mod-lex-item & attested-infr-rule-dtr & evid-rule-dtr & narr-rule-dtr & narr-tshuk-rule-dtr & tense-rule-dtr &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPR < >,
                             SPEC < >,
                             SUBJ < #subj > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT cat-sat &
                               [ VAL [ SPR < >,
                                       COMPS < > ] ],
                           CONT.HOOK.INDEX #xarg ] ],
    INFLECTED.REPORT-FLAG na-or-- ].

intransitive-verb-lex := verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST.FIRST.LOCAL.CAT.HEAD noun ].

transitive-verb-lex := verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT cat-sat &
                         [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] > ].

dir-intransitive-verb-lex := intransitive-verb-lex &
  [ ARG-ST.FIRST.LOCAL.CAT.HEAD noun &
                                [ CASE dir ] ].

erg-dir-transitive-verb-lex := transitive-verb-lex &
  [ ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE erg ] ],
             [ LOCAL.CAT.HEAD noun &
                              [ CASE dir ] ] > ].

tr-verb-verb-lex := erg-dir-transitive-verb-lex.

;;; Complementizers

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

;;; Intermediate rule types

attested-infr-rule-dtr := word-or-lexrule.
evid-rule-dtr := word-or-lexrule.
narr-rule-dtr := word-or-lexrule.
narr-tshuk-rule-dtr := word-or-lexrule.
tense-rule-dtr := word-or-lexrule.

;;; Lexical rule types

case-lex-rule-super := add-only-no-ccont-rule &
  [ INFLECTED [ CASE-FLAG +,
                REPORT-FLAG #report,
                EXPER-OR-OBS-FLAG #exper-or-obs ],
    DTR noun-lex &
        [ INFLECTED [ REPORT-FLAG #report,
                      EXPER-OR-OBS-FLAG #exper-or-obs ] ] ].

dir-lex-rule := case-lex-rule-super & const-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE dir ].

erg-lex-rule := case-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE erg ].

aspect-lex-rule-super := add-only-no-ccont-rule & evid-rule-dtr & infl-lex-rule & narr-rule-dtr & narr-tshuk-rule-dtr & tense-rule-dtr &
  [ INFLECTED #infl,
    DTR verb-lex &
        [ INFLECTED #infl ] ].

cont-lex-rule := aspect-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT continuous ].

perf-lex-rule := aspect-lex-rule-super & attested-infr-rule-dtr &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT perfect ].

evid-lex-rule-super := cont-change-only-lex-rule & infl-lex-rule & narr-tshuk-rule-dtr & tense-rule-dtr &
  [ INFLECTED.CASE-FLAG #case,
    DTR evid-rule-dtr &
        [ INFLECTED.CASE-FLAG #case ] ].

report-lex-rule := add-only-no-ccont-rule & evid-lex-rule-super & narr-rule-dtr &
  [ INFLECTED [ REPORT-FLAG +,
                EXPER-OR-OBS-FLAG #exper-or-obs ],
    DTR.INFLECTED.EXPER-OR-OBS-FLAG #exper-or-obs ].

obs-lex-rule := evid-lex-rule-super & observed-evidential-lex-rule &
  [ INFLECTED [ EXPER-OR-OBS-FLAG +,
                REPORT-FLAG #report ],
    DTR.INFLECTED.REPORT-FLAG #report ].

evidential-lex-rule := cont-change-only-lex-rule & same-spr-lex-rule & same-spec-lex-rule &
  [ C-CONT [ RELS <! event-relation &
                     [ LBL #ltop,
                       ARG0 event,
                       ARG1 #harg ] !>,
             HCONS <! qeq &
                      [ HARG #harg,
                        LARG #larg ] !>,
             HOOK [ LTOP #ltop,
                    INDEX #mainev,
                    XARG #mainagent ] ],
    DTR.SYNSEM.LOCAL.CONT.HOOK [ LTOP #larg,
                                 XARG #mainagent,
                                 INDEX #mainev ] ].

observed-evidential-lex-rule := evidential-lex-rule &
  [ C-CONT.RELS <! [ PRED "ev_observed_rel" ] !> ].

narr-lex-rule-super := cont-change-only-lex-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR narr-rule-dtr &
        [ INFLECTED #infl &
                    [ REPORT-FLAG + ] ] ].

narrative-evidential-lex-rule := evidential-lex-rule &
  [ C-CONT.RELS <! [ PRED "ev_narrative_rel" ] !> ].

narrat-lex-rule := narr-lex-rule-super & narrative-evidential-lex-rule.

fact-infr-lex-rule-super := cont-change-only-lex-rule & infl-lex-rule & narr-tshuk-rule-dtr & tense-rule-dtr &
  [ INFLECTED #infl,
    DTR verb-lex &
        [ INFLECTED #infl ] ].

fact-inferential-evidential-lex-rule := evidential-lex-rule &
  [ C-CONT.RELS <! [ PRED "ev_fact-inferential_rel" ] !> ].

fact-infr-lrt-lex-rule := fact-inferential-evidential-lex-rule & fact-infr-lex-rule-super.

tense-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & narr-tshuk-rule-dtr &
  [ INFLECTED #infl,
    DTR tense-rule-dtr &
        [ INFLECTED #infl ] ].

past-lex-rule := tense-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE past ].

exper-lex-rule-super := cont-change-only-lex-rule & infl-lex-rule & narr-tshuk-rule-dtr & tense-rule-dtr &
  [ INFLECTED [ EXPER-OR-OBS-FLAG +,
                REPORT-FLAG #report,
                CASE-FLAG #case ],
    DTR verb-lex &
        [ INFLECTED [ REPORT-FLAG #report,
                      CASE-FLAG #case ] ] ].

experiential-evidential-lex-rule := evidential-lex-rule &
  [ C-CONT.RELS <! [ PRED "ev_experiential_rel" ] !> ].

exp-lex-rule := exper-lex-rule-super & experiential-evidential-lex-rule.

appearance-infr-lex-rule-super := cont-change-only-lex-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR verb-lex &
        [ INFLECTED #infl ] ].

appearance-inferential-evidential-lex-rule := evidential-lex-rule &
  [ C-CONT.RELS <! [ PRED "ev_appearance-inferential_rel" ] !> ].

appr-infr-lex-rule := appearance-inferential-evidential-lex-rule & appearance-infr-lex-rule-super.

appr-infr-past-lex-rule := appearance-inferential-evidential-lex-rule & appearance-infr-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE past ].

attested-infr-lex-rule-super := cont-change-only-lex-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR attested-infr-rule-dtr &
        [ INFLECTED #infl ] ].

attested-inferential-evidential-lex-rule := evidential-lex-rule &
  [ C-CONT.RELS <! [ PRED "ev_attested-inferential_rel" ] !> ].

att-infr-lex-rule := attested-inferential-evidential-lex-rule & attested-infr-lex-rule-super.

narr-tshuk-lex-rule-super := lex-rule &
  [ INFLECTED #infl,
    DTR narr-tshuk-rule-dtr &
        [ INFLECTED #infl &
                    [ EXPER-OR-OBS-FLAG na ] ] ].

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

comp-head-phrase := basic-head-1st-comp-phrase & head-final.

subj-head-phrase := decl-head-subj-phrase & head-final &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS <! [ PRED "exist_q_rel" ] !> ].
