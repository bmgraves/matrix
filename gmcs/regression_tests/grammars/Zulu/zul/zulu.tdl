;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of Zulu
;;; created at:
;;;     Wed Jan 24 04:50:25 UTC 2018
;;; based on Matrix customization system version of:
;;;     unknown time
;;;
;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

inflected :+ [ SC-FLAG luk,
    FV-FLAG luk,
    NC-FLAG luk ].

infl-satisfied :+ [ SC-FLAG na-or-+,
    FV-FLAG na-or-+,
    NC-FLAG na-or-+ ].

basic-head-comp-phrase :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-opt-subj-phrase :+ [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

noun-lex := basic-noun-lex & basic-one-arg & no-hcons-lex-item & non-mod-lex-item &
  [ ARG-ST < #spr >,
    SYNSEM.LOCAL.CAT.VAL [ COMPS < >,
                           SUBJ < >,
                           SPEC < >,
                           SPR < #spr &
                                 [ LOCAL.CAT.HEAD det,
                                   OPT + ] > ],
    INFLECTED.NC-FLAG - ].

noun1-noun-lex := noun-lex.

noun2-noun-lex := noun-lex.

;;; Verbs

verb-lex := basic-verb-lex & non-mod-lex-item & FV-rule-dtr & SC-rule-dtr & negation-rule-dtr & tense-rule-dtr &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPR < >,
                             SPEC < >,
                             SUBJ < #subj > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT cat-sat &
                               [ VAL [ SPR < >,
                                       COMPS < > ] ],
                           CONT.HOOK.INDEX #xarg ] ] ].

intransitive-verb-lex := verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST.FIRST.LOCAL.CAT.HEAD noun,
    INFLECTED [ SC-FLAG -,
                FV-FLAG - ] ].

transitive-verb-lex := verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT cat-sat &
                         [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] >,
    INFLECTED [ SC-FLAG -,
                FV-FLAG - ] ].

verb1-verb-lex := intransitive-verb-lex.

verb2-verb-lex := transitive-verb-lex.

;;; Complementizers

;;; Others

; We treat question particles as complementizers.
; Here is the lexical type for complementizers.

complementizer-lex-item := raise-sem-lex-item & basic-one-arg &
  [ SYNSEM.LOCAL.CAT [ HEAD comp &
                            [ MOD < > ],
                       VAL [ SPR < >,
                             SUBJ < >,
                             COMPS < #comp > ] ],
    ARG-ST < #comp &
             [ LOCAL.CAT [ MC +,
                           HEAD verb,
                           VAL [ SUBJ < >,
                                 COMPS < > ] ] ] > ].

; Subtype for question particles. Constrains SF to ques.

qpart-lex-item := complementizer-lex-item &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.SF ques ].

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

;;; Intermediate rule types

FV-rule-dtr := word-or-lexrule.
SC-rule-dtr := word-or-lexrule.
negation-rule-dtr := word-or-lexrule.
tense-rule-dtr := word-or-lexrule.

;;; Lexical rule types

NC-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED [ NC-FLAG +,
                SC-FLAG #sc,
                FV-FLAG #fv ],
    DTR noun-lex &
        [ INFLECTED [ SC-FLAG #sc,
                      FV-FLAG #fv ] ] ].

C1-lex-rule := NC-lex-rule-super.

C9-lex-rule := NC-lex-rule-super.

OC-lex-rule-super := FV-rule-dtr & SC-rule-dtr & add-only-no-ccont-rule & infl-lex-rule & negation-rule-dtr & tense-rule-dtr &
  [ INFLECTED #infl,
    DTR transitive-verb-lex &
        [ INFLECTED #infl ] ].

OC1-lex-rule := OC-lex-rule-super.

OC9-lex-rule := OC-lex-rule-super.

tense-lex-rule-super := FV-rule-dtr & SC-rule-dtr & add-only-no-ccont-rule & infl-lex-rule & negation-rule-dtr &
  [ INFLECTED #infl,
    DTR tense-rule-dtr &
        [ INFLECTED #infl ] ].

fut-tense-lex-rule := tense-lex-rule-super.

pres-tense-lex-rule := tense-lex-rule-super.

SC-lex-rule-super := FV-rule-dtr & add-only-no-ccont-rule & infl-lex-rule & negation-rule-dtr &
  [ INFLECTED [ SC-FLAG +,
                FV-FLAG #fv,
                NC-FLAG #nc ],
    DTR SC-rule-dtr &
        [ INFLECTED [ FV-FLAG #fv,
                      NC-FLAG #nc ] ] ].

SC1-lex-rule := SC-lex-rule-super.

SC9-lex-rule := SC-lex-rule-super.

FV-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED [ FV-FLAG +,
                SC-FLAG #sc,
                NC-FLAG #nc ],
    DTR FV-rule-dtr &
        [ INFLECTED [ SC-FLAG #sc,
                      NC-FLAG #nc ] ] ].

default-FV-lex-rule := FV-lex-rule-super.

neg-FV-lex-rule := FV-lex-rule-super.

negation-lex-rule := FV-rule-dtr & add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR negation-rule-dtr &
        [ INFLECTED #infl ] ].

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

; The head of head-comp-phrase can't be: ['comp']

head-comp-phrase := basic-head-1st-comp-phrase & head-initial &
  [ SYNSEM.LOCAL.CAT.HEAD +nvjrpdmo ].

subj-head-phrase := decl-head-subj-phrase & head-final &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS <! [ PRED "exist_q_rel" ] !> ].

; comp-head-phrase requires things that are [ HEAD comp ].

comp-head-phrase := basic-head-1st-comp-phrase & head-final &
  [ SYNSEM.LOCAL.CAT.HEAD comp ].
