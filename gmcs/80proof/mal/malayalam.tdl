;;; Grammar of Malayalam
;;; created at:
;;;     Wed May 13 22:35:43 UTC 2009
;;; based on Matrix customization system version of:
;;;     unknown time

case-marker-rule-dtr := avm.

animate-nouns-noun-lex := case-marker-rule-dtr & noun-lex &
  [ INFLECTED - ].

1s-pronoun-noun-lex := case-marker-rule-dtr & no-spr-noun-lex &
  [ INFLECTED -,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1singular ].

case-marker-lex-rule := lexeme-to-word-rule & add-only-no-ccont-rule &
  [ DTR case-marker-rule-dtr ].

accusative-case-marker-lex-rule := infl-ltow-rule & case-marker-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE acc ].

sociative-case-marker-lex-rule := infl-ltow-rule & case-marker-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE soc ].

dative-case-marker-lex-rule := infl-ltow-rule & case-marker-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE dat ].

nominative-case-marker-lex-rule := const-ltow-rule & case-marker-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE nom ].

inanimate-case-marker-lex-rule := lexeme-to-word-rule & add-only-no-ccont-rule &
  [ DTR inanimate-nouns-noun-lex ].

inanimate-nouns-noun-lex := no-spr-noun-lex &
  [ INFLECTED - ].

nominative-accusative-case-marker-lex-rule := const-ltow-rule & inanimate-case-marker-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE acc+nom ].

inanimate-dative-case-marker-lex-rule := infl-ltow-rule & inanimate-case-marker-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE dat ].

inanimate-sociative-case-marker-lex-rule := infl-ltow-rule & inanimate-case-marker-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE soc ].

number-marker-lex-rule := lexeme-to-lexeme-rule & add-only-no-ccont-rule &
  [ DTR animate-nouns-noun-lex ].

plural-marker-lex-rule := infl-ltol-rule & number-marker-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM plural ].

singular-marker-lex-rule := const-ltol-rule & number-marker-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM singular ].

forma-tense-rule-dtr := avm.

nom-acc-trans-verb-lex := forma-tense-rule-dtr & past-present-negative-rule-dtr & question-lex-rule-rule-dtr & nom-acc-transitive-verb-lex &
  [ INFLECTED - ].

dat-intrans-verb-lex := forma-tense-rule-dtr & past-present-negative-rule-dtr & question-lex-rule-rule-dtr & intransitive-verb-lex &
  [ INFLECTED -,
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD.CASE dat ].

forma-tense-lex-rule := infl-ltow-rule & add-only-no-ccont-rule & past-present-negative-rule-dtr & question-lex-rule-rule-dtr &
  [ DTR forma-tense-rule-dtr ].

forma-past-tense-marker-lex-rule := forma-tense-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE past ].

forma-present-tense-marker-lex-rule := forma-tense-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE present ].

formb-past-tense-rule-dtr := avm.

nom-intrans-verb-lex := formb-past-tense-rule-dtr & past-present-negative-rule-dtr & question-lex-rule-rule-dtr & nom-intransitive-verb-lex &
  [ INFLECTED - ].

aux-lex := formb-past-tense-rule-dtr & past-present-negative-rule-dtr & question-lex-rule-rule-dtr & verb-lex &
  [ INFLECTED -,
    SYNSEM.LOCAL.CAT.HEAD.AUX + ].

formb-past-tense-lex-rule := infl-ltow-rule & add-only-no-ccont-rule & past-present-negative-rule-dtr & question-lex-rule-rule-dtr &
  [ DTR formb-past-tense-rule-dtr ].

formb-past-tense-marker-lex-rule := formb-past-tense-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE past ].

formb-present-tense-marker-lex-rule := formb-past-tense-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE present ].

infinitive-lex-rule := infl-ltow-rule & add-only-no-ccont-rule &
  [ DTR verb-lex ].

verb-lex := tense-aspect-rule-dtr & lex-item &
  [ INFLECTED -,
    SYNSEM.LOCAL.CAT.HEAD verb ].

infinitive-marker-lex-rule := infinitive-lex-rule.

negative-marker-lex-rule := infl-cont-change-only-ltol-rule &
  [ DTR infinitive-lex-rule ].

; This lexical rule adds the neg_r_rel to the verb's
; 	          RELS list.  It is instantiated by a spelling-changing
; 	          rule as specified in irules.tdl.

negative-infl-marker-lex-rule := negative-marker-lex-rule &
  [ C-CONT [ HOOK [ XARG #xarg,
                    LTOP #ltop,
                    INDEX #ind ],
             RELS <! event-relation &
                     [ PRED "_neg_r_rel",
                       LBL #ltop,
                       ARG1 #harg ] !>,
             HCONS <! qeq &
                      [ HARG #harg,
                        LARG #larg ] !> ],
    DTR.SYNSEM [ LKEYS #lkeys,
                 LOCAL [ CONT.HOOK [ XARG #xarg,
                                     INDEX #ind,
                                     LTOP #larg ],
                         CAT.HEAD verb ] ],
    SYNSEM [ LKEYS #lkeys,
             LOCAL.CONT.HOOK.INDEX.E.TENSE future ] ].

past-present-negative-rule-dtr := avm.

past-present-negative-lex-rule := infl-cont-change-only-ltol-rule &
  [ DTR past-present-negative-rule-dtr ].

; This lexical rule adds the neg_r_rel to the verb's
; 	          RELS list.  It is instantiated by a spelling-changing
; 	          rule as specified in irules.tdl.

past-present-neg-marker-lex-rule := past-present-negative-lex-rule &
  [ C-CONT [ HOOK [ XARG #xarg,
                    LTOP #ltop,
                    INDEX #ind ],
             RELS <! event-relation &
                     [ PRED "_neg_r_rel",
                       LBL #ltop,
                       ARG1 #harg ] !>,
             HCONS <! qeq &
                      [ HARG #harg,
                        LARG #larg ] !> ],
    SYNSEM.LKEYS #lkeys,
    DTR.SYNSEM [ LKEYS #lkeys,
                 LOCAL [ CONT.HOOK [ XARG #xarg,
                                     INDEX #ind,
                                     LTOP #larg ],
                         CAT.HEAD verb ] ] ].

fake-tensed-aspect-marker-lex-rule := infl-add-only-no-ccont-ltol-rule & tense-aspect-rule-dtr &
  [ DTR fake-tense-lex-rule ].

imperfective-marker-lex-rule := fake-tensed-aspect-marker-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT imperfective ].

infinitive-aspect-marker-lex-rule := infl-add-only-no-ccont-ltol-rule & tense-aspect-rule-dtr &
  [ DTR infinitive-lex-rule ].

imperfective-aspect-marker-lex-rule := infinitive-aspect-marker-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT imperfective ].

question-lex-rule-rule-dtr := avm.

question-lex-rule-lex-rule := infl-add-only-no-ccont-ltol-rule &
  [ DTR question-lex-rule-rule-dtr ].

question-marker-lex-rule := question-lex-rule-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.SF ques ].

formc-tense-lex-rule := infl-ltow-rule & add-only-no-ccont-rule &
  [ DTR nom-soc-trans-verb-lex ].

nom-soc-trans-verb-lex := transitive-verb-lex &
  [ INFLECTED -,
    SYNSEM.LOCAL.CAT.VAL [ COMPS.FIRST.LOCAL.CAT.HEAD.CASE soc,
                           SUBJ.FIRST.LOCAL.CAT.HEAD.CASE nom ] ].

formc-past-tense-lex-rule := formc-tense-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE past ].

tense-aspect-rule-dtr := avm.

habitual-aspect-marker-lex-rule := tense-aspect-rule-dtr & infl-add-only-no-ccont-ltol-rule &
  [ DTR verb-lex ].

tense-aspect-lex-rule := lexeme-to-word-rule & add-only-no-ccont-rule &
  [ DTR tense-aspect-rule-dtr ].

future-aspect-marker-lex-rule := infl-ltow-rule & tense-aspect-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE future ].

past-aspect-marker-lex-rule := infl-ltow-rule & tense-aspect-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE past ].

present-aspect-marker-lex-rule := const-ltow-rule & tense-aspect-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE present ].

fake-tense-lex-rule := infl-add-only-no-ccont-ltol-rule &
  [ DTR verb-lex ].

fake-present-lex-rule := fake-tense-lex-rule.

habitual-aspect-marker-affix-lex-rule := habitual-aspect-marker-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT habitual ].

;;; Lexical types

;;; Nouns

noun-lex := basic-noun-lex & basic-one-arg & no-hcons-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < #spr &
                                 [ LOCAL.CAT.HEAD det ] >,
                           COMPS < >,
                           SUBJ < >,
                           SPEC < > ],
    ARG-ST < #spr > ].

no-spr-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPR < [ OPT + ] > ].

; Nouns which cannot take specifiers mark their SPR requirement
; as OPT +.  Making the non-head daughter OPT - in this rule
; keeps such nouns out.
; 
; Rules for building NPs.  Note that the Matrix uses SPR for
; the specifier of nouns and SUBJ for the subject (specifier) of verbs.

head-spec-phrase := basic-head-spec-phrase & head-final &
  [ NON-HEAD-DTR.SYNSEM.OPT - ].

noun :+ [ CASE case ].

1pl-incl-pronoun-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1plural_incl ].

1pl-excl-pronoun-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1plural_excl ].

2s-pronoun-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2singular ].

2pl-pronoun-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2plural ].

3s-masc-pronoun-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PERNUM 3singular,
                                       GEND masculine ] ].

3s-fem-pronoun-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PERNUM 3singular,
                                       GEND feminine ] ].

3s-neuter-pronoun-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PERNUM 3singular,
                                       GEND inanimate ] ].

3pl-rational-pronoun-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PERNUM 3plural,
                                       GEND rational ] ].

3pl-non-human-pronoun-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PERNUM 3plural,
                                       GEND inanimate ] ].

;;; Verbs

head :+ [ FORM form,
    AUX bool ].

main-verb-lex := verb-lex & basic-verb-lex &
  [ ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT.VAL [ SPR < >,
                                     COMPS < > ],
                           CONT.HOOK.INDEX #xarg ] ],
    SYNSEM.LOCAL [ CONT.HOOK.XARG #xarg,
                   CAT [ HEAD.AUX -,
                         VAL [ SPR < >,
                               SPEC < >,
                               SUBJ < #subj > ],
                         HC-LIGHT - ] ] ].

intransitive-verb-lex := main-verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST.FIRST.LOCAL.CAT.HEAD noun ].

transitive-verb-lex := main-verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] > ].

nom-intransitive-verb-lex := intransitive-verb-lex &
  [ ARG-ST.FIRST.LOCAL.CAT.HEAD noun &
                                [ CASE nom ] ].

nom-acc-transitive-verb-lex := transitive-verb-lex &
  [ ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE nom ] ],
             [ LOCAL.CAT.HEAD noun &
                              [ CASE acc ] ] > ].

;;; Auxiliaries

; Somewhat surprisingly, this inherits from basic-two-arg, so
; that the non-local features are amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

arg-comp-aux := aux-lex & basic-two-arg &
  [ SYNSEM.LOCAL [ CAT.VAL [ SUBJ < #subj >,
                             COMPS < #comps . #vcomps >,
                             SPR < >,
                             SPEC < > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST < #subj &
             [ LOCAL [ CONT.HOOK.INDEX #xarg,
                       CAT [ VAL [ SPR < >,
                                   COMPS < > ],
                             HEAD noun &
                                  [ CASE #case ] ] ] ],
             #comps &
             [ LIGHT +,
               LOCAL [ CONT.HOOK.XARG #xarg,
                       CAT [ VAL [ COMPS #vcomps,
                                   SUBJ < [ LOCAL.CAT.HEAD.CASE #case ] > ],
                             HEAD verb &
                                  [ AUX - ] ] ] ] > ].

; Note that raise-sem-lex-item assumes the first complement is
; where the HOOK comes from.  It's not clear to me how you'd
; tell that you had an argument composition auxiliary if it
; wasn't appearing adjacent to the verb.

arg-comp-aux-no-pred := arg-comp-aux & raise-sem-lex-item &
  [ ARG-ST < [  ],
             [ LOCAL.CAT.HEAD.AUX - ] > ].

aux1-aux-lex := arg-comp-aux-no-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM nonfinite ].

;;; Determiners
;;; SPEC is non-empty, and already specified by basic-determiner-lex.

determiner-lex := basic-determiner-lex & basic-zero-arg &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < >,
                           COMPS < >,
                           SUBJ < > ] ].

indefinite-article-determiner-lex := determiner-lex.

;;; Case

case := *top*.
soc := case.  ; sociative
dat := case.  ; dative
acc+nom := case.
acc := acc+nom.
nom := acc+nom.

png :+ [ PERNUM pernum,
    GEND gender ].

;;; Pernum

pernum := *top*.
singular := pernum.
plural := pernum.
1st := pernum.
2nd := pernum.
3rd := pernum.
1singular := 1st & singular.
2singular := 2nd & singular.
3singular := 3rd & singular.
1plural := 1st & plural.
1plural_incl := 1plural.
1plural_excl := 1plural.
2plural := 2nd & plural.
3plural := 3rd & plural.

;;; Gender

gender := *top*.
rational := animate.
non-rational := animate.
feminine := rational.
masculine := rational.
animate := gender.
inanimate := gender.

;;; Form

form := *top*.
nonfinite := form.
finite := form.

;;; Tense

past := tense.
present := tense.
future := tense.

;;; Aspect

imperfective := aspect.
habitual := aspect.

;;; Phrasal types

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

basic-head-comp-phrase :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-mod-phrase-simple :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

; We can't just use the V-final and V-initial word
; order modules together to get a good free word order
; module. The root of the problem seems to be that we
; need the subject to be able to attach inside the
; object(s) for VSO and OSV, but at the same time, we
; don't want complete flexibility on order of attachment
; when the verb is in the middle -- that would give
; spurious ambiguity.  This solution adopts the xmod
; hierarchy to enforce right-first attachment.  That is,
; all arguments appears to the right of the verb must
; attach before all arguments appearing to the left.  The
; linguistic prediction of this analysis is that free
; word order languages do not have a consistent VP
; consituent, even when the verb and object are adjacent
; (OV order).  Using a separate feature for tracking
; argument attachment (as opposed to modifier
; attachment).  We might be able to collapse these one
; day, but that's not obvious.

synsem :+ [ ATTACH xmod ].

head-initial-head-nexus := head-initial &
  [ SYNSEM.ATTACH lmod,
    HEAD-DTR.SYNSEM.ATTACH notmod-or-lmod ].

head-final-head-nexus := head-final &
  [ SYNSEM.ATTACH rmod ].

; We'll need to add identification of ATTACH between
; mother and head-daughter for all other kinds of phrases
; if we do this.  Just for illustration, I'm putting it
; in for head-adjunct phrases here:

head-mod-phrase :+ [ SYNSEM.ATTACH #attach,
    HEAD-DTR.SYNSEM.ATTACH #attach ].

head-subj-phrase := decl-head-subj-phrase & head-initial-head-nexus.

subj-head-phrase := decl-head-subj-phrase & head-final-head-nexus.

head-comp-phrase := basic-head-1st-comp-phrase & head-initial-head-nexus &
  [ SYNSEM.LOCAL.CAT.HEAD.AUX - ].

comp-head-phrase := basic-head-1st-comp-phrase & head-final-head-nexus.

head-comp-phrase-2 := basic-head-2nd-comp-phrase & head-initial-head-nexus.

comp-head-phrase-2 := basic-head-2nd-comp-phrase & head-final-head-nexus.

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS <! [ PRED "exist_q_rel" ] !> ].

;;; Coordination Strategy 1

n1-top-coord-rule := basic-n-top-coord-rule & omni-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

n1-mid-coord-rule := basic-n-mid-coord-rule & omni-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

n1-bottom-coord-rule := infl-bottom-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1",
    SYNSEM.LOCAL.COORD-REL.PRED "_and_coord_rel",
    DTR.SYNSEM.LOCAL.CAT.HEAD noun ].

n1-left-coord-rule := infl-left-coord-rule & n-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-REL.PRED "_and_coord_rel" ].
