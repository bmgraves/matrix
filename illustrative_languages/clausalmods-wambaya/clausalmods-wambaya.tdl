;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of clausalmods-wambaya
;;; created at:
;;;     Mon Jan 29 22:12:58 UTC 2018
;;; based on Matrix customization system version of:
;;;     unknown time
;;;
;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

noun :+ [ CASE case ].

head :+ [ AUX bool,
    NMZ bool,
    FORM form,
    INIT bool ].

inflected :+ [ NMZ-CASE-FLAG luk,
    INTRANS-TENSE-OR-NMZ-CASE-FLAG luk,
    AUX-FIRST-PER-FLAG luk,
    NMZ-CASE-OR-TRANS-TENSE-FLAG luk,
    TRANS-FEATURES-OR-TRANS-TENSE-FLAG luk,
    AUX-FEMINE-FLAG luk,
    CASE-FLAG luk,
    AUX-TENSE-FLAG luk,
    INTRANS-FEATURES-OR-INTRANS-TENSE-FLAG luk,
    AUX-MASCULINE-FLAG luk ].

infl-satisfied :+ [ NMZ-CASE-FLAG na-or-+,
    INTRANS-TENSE-OR-NMZ-CASE-FLAG na-or-+,
    AUX-FIRST-PER-FLAG na-or-+,
    NMZ-CASE-OR-TRANS-TENSE-FLAG na-or-+,
    TRANS-FEATURES-OR-TRANS-TENSE-FLAG na-or-+,
    AUX-FEMINE-FLAG na-or-+,
    CASE-FLAG na-or-+,
    AUX-TENSE-FLAG na-or-+,
    INTRANS-FEATURES-OR-INTRANS-TENSE-FLAG na-or-+,
    AUX-MASCULINE-FLAG na-or-+ ].

png :+ [ PER person,
    NUM number,
    GEND gender ].

basic-head-opt-subj-phrase :+ [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

basic-head-mod-phrase-simple :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Case

case := *top*.
erg := case.  ; ergative
abs := case.  ; absolutive
dat := case.  ; dative
all := case.  ; allative
acc := case.  ; accusative

low-nmz-subjid-trans-lex-rule := low-nominalization-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL [ COMPS < [ LOCAL [ CAT [ HEAD noun,
                                                   VAL.SPR < > ],
                                             CONT.HOOK.INDEX #obj ] ] >,
                           SUBJ #subj ],
    DTR.SYNSEM.LOCAL.CAT.VAL [ COMPS < [ LOCAL.CONT.HOOK.INDEX #obj ] >,
                               SUBJ #subj ] ].

;;; Person

person := *top*.
1st := person.
2nd := person.
3rd := person.

;;; Number

number := *top*.
singular := number.
plural := number.

;;; Gender

gender := *top*.
masculine-or-neuter := gender.
feminine := gender.
vegetable := gender.

;;; Form

form := *top*.
nonfinite := form.
finite := form.
INF := nonfinite.
PURP := nonfinite.
PRIOR := nonfinite.

;;; Tense

nonpast := tense.
future := nonpast.
past := tense.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

noun-lex := basic-noun-lex & basic-one-arg & no-hcons-lex-item & non-mod-lex-item &
  [ ARG-ST < #spr >,
    SYNSEM.LOCAL.CAT [ VAL [ COMPS < >,
                             SUBJ < >,
                             SPEC < >,
                             SPR < #spr &
                                   [ LOCAL.CAT.HEAD det,
                                     OPT + ] > ],
                       HEAD.NMZ - ],
    INFLECTED.CASE-FLAG - ].

masc-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.GEND masculine-or-neuter ].

fem-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.GEND feminine ].

veg-noun-lex := noun-lex.

;;; Verbs

verb-lex := non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT [ HC-LIGHT -,
                       HEAD verb &
                            [ NMZ - ] ] ].

main-verb-lex := verb-lex & basic-verb-lex & nmz-case-rule-dtr &
  [ SYNSEM.LOCAL [ CAT [ HEAD.AUX -,
                         VAL [ SPR < >,
                               SPEC < >,
                               SUBJ < #subj > ] ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT cat-sat &
                               [ VAL [ SPR < >,
                                       COMPS < > ] ],
                           CONT.HOOK.INDEX #xarg ] ] ].

aux-lex := verb-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.AUX + ].

intransitive-verb-lex := main-verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST.FIRST.LOCAL.CAT.HEAD noun ].

transitive-verb-lex := main-verb-lex & transitive-lex-item & trans-features-or-trans-tense-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT cat-sat &
                         [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] > ].

abs-intransitive-verb-lex := intransitive-verb-lex &
  [ ARG-ST.FIRST.LOCAL.CAT.HEAD noun &
                                [ CASE abs ] ].

erg-abs-transitive-verb-lex := transitive-verb-lex &
  [ ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE erg ] ],
             [ LOCAL.CAT.HEAD noun &
                              [ CASE abs ] ] > ].

intrans-verb-lex := abs-intransitive-verb-lex &
  [ INFLECTED [ INTRANS-TENSE-OR-NMZ-CASE-FLAG -,
                INTRANS-FEATURES-OR-INTRANS-TENSE-FLAG - ] ].

trans-verb-lex := erg-abs-transitive-verb-lex &
  [ INFLECTED [ TRANS-FEATURES-OR-TRANS-TENSE-FLAG -,
                NMZ-CASE-OR-TRANS-TENSE-FLAG - ] ].

trans2-verb-lex := transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD.CASE erg,
                           COMPS.FIRST.LOCAL.CAT.HEAD.CASE all ],
    INFLECTED [ TRANS-FEATURES-OR-TRANS-TENSE-FLAG -,
                NMZ-CASE-OR-TRANS-TENSE-FLAG - ] ].

;;; Auxiliaries

arg-comp-aux := aux-lex & basic-two-arg &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPR < >,
                             SPEC < >,
                             COMPS < #comps . #vcomps >,
                             SUBJ < #subj > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST < #subj &
             [ LOCAL [ CAT [ HEAD noun &
                                  [ CASE #case ],
                             VAL [ SUBJ < >,
                                   SPR < >,
                                   SPEC < >,
                                   COMPS < > ] ],
                       CONT.HOOK.INDEX #xarg ] ],
             #comps &
             [ LIGHT +,
               LOCAL [ CONT.HOOK.XARG #xarg,
                       CAT [ HEAD verb &
                                  [ AUX - ],
                             VAL [ COMPS #vcomps,
                                   SUBJ < [ LOCAL.CAT.HEAD.CASE #case ] > ] ] ] ] > ].

; Somewhat surprisingly, this inherits from basic-two-arg, so
; that the non-local features are amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Note that raise-sem-lex-item assumes the first complement is
; where the HOOK comes from.  It's not clear to me how you'd
; tell that you had an argument composition auxiliary if it
; wasn't appearing adjacent to the verb.

arg-comp-aux-no-pred := arg-comp-aux & raise-sem-lex-item.

masc-aux-lex := arg-comp-aux-no-pred & aux-tense-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM nonfinite,
    INFLECTED [ AUX-MASCULINE-FLAG -,
                AUX-TENSE-FLAG - ] ].

; Somewhat surprisingly, this inherits from basic-two-arg, so
; that the non-local features are amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Note that raise-sem-lex-item assumes the first complement is
; where the HOOK comes from.  It's not clear to me how you'd
; tell that you had an argument composition auxiliary if it
; wasn't appearing adjacent to the verb.

fem-aux-lex := arg-comp-aux-no-pred & aux-tense-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM nonfinite,
    INFLECTED [ AUX-FEMINE-FLAG -,
                AUX-TENSE-FLAG - ] ].

; Somewhat surprisingly, this inherits from basic-two-arg, so
; that the non-local features are amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Note that raise-sem-lex-item assumes the first complement is
; where the HOOK comes from.  It's not clear to me how you'd
; tell that you had an argument composition auxiliary if it
; wasn't appearing adjacent to the verb.

first-aux-lex := arg-comp-aux-no-pred & aux-tense-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM nonfinite,
    INFLECTED [ AUX-FIRST-PER-FLAG -,
                AUX-TENSE-FLAG - ] ].

;;; Complementizers

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

low-nominalization-lex-rule := cat-change-with-ccont-lex-rule &
  [ SYNSEM.LOCAL.CAT [ HEAD noun &
                            [ NMZ +,
                              MOD #mod ],
                       VAL [ SUBJ < [ LOCAL [ CAT.VAL.SPR < >,
                                              CONT.HOOK.INDEX #subj ] ] >,
                             SPEC #spec,
                             SPR < [ OPT + ] > ],
                       MC #mc,
                       MKG #mkg,
                       HC-LIGHT #hc-light,
                       POSTHEAD #posthead ],
    C-CONT [ RELS <! [ PRED "nominalized_rel",
                       LBL #ltop,
                       ARG0 ref-ind & #arg0,
                       ARG1 #arg1 ] !>,
             HCONS <! qeq &
                      [ HARG #arg1,
                        LARG #larg ] !>,
             HOOK [ XARG #xarg,
                    INDEX #arg0,
                    LTOP #ltop ] ],
    DTR.SYNSEM.LOCAL [ CAT [ HEAD.MOD #mod,
                             VAL [ SUBJ < [ LOCAL.CONT.HOOK.INDEX #subj ] >,
                                   SPEC #spec ],
                             MC #mc,
                             MKG #mkg,
                             HC-LIGHT #hc-light,
                             POSTHEAD #posthead ],
                       CONT.HOOK [ XARG #xarg,
                                   LTOP #larg ] ] ].

low-nmz-subjid-compsid-lex-rule := low-nominalization-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL [ COMPS #comps,
                           SUBJ #subj ],
    DTR.SYNSEM.LOCAL.CAT.VAL [ COMPS #comps,
                               SUBJ #subj ] ].

;;; Intermediate rule types

aux-tense-rule-dtr := word-or-lexrule.
nmz-case-rule-dtr := word-or-lexrule.
trans-features-or-trans-tense-rule-dtr := word-or-lexrule.

;;; Lexical rule types

case-lex-rule-super := add-only-no-ccont-rule &
  [ INFLECTED [ CASE-FLAG +,
                NMZ-CASE-FLAG #nmz-case,
                INTRANS-TENSE-OR-NMZ-CASE-FLAG #intrans-tense-or-nmz-case,
                AUX-FIRST-PER-FLAG #aux-first-per,
                NMZ-CASE-OR-TRANS-TENSE-FLAG #nmz-case-or-trans-tense,
                INTRANS-FEATURES-OR-INTRANS-TENSE-FLAG #intrans-features-or-intrans-tense,
                AUX-FEMINE-FLAG #aux-femine,
                AUX-TENSE-FLAG #aux-tense,
                TRANS-FEATURES-OR-TRANS-TENSE-FLAG #trans-features-or-trans-tense,
                AUX-MASCULINE-FLAG #aux-masculine ],
    DTR noun-lex &
        [ INFLECTED [ NMZ-CASE-FLAG #nmz-case,
                      INTRANS-TENSE-OR-NMZ-CASE-FLAG #intrans-tense-or-nmz-case,
                      AUX-FIRST-PER-FLAG #aux-first-per,
                      NMZ-CASE-OR-TRANS-TENSE-FLAG #nmz-case-or-trans-tense,
                      INTRANS-FEATURES-OR-INTRANS-TENSE-FLAG #intrans-features-or-intrans-tense,
                      AUX-FEMINE-FLAG #aux-femine,
                      AUX-TENSE-FLAG #aux-tense,
                      TRANS-FEATURES-OR-TRANS-TENSE-FLAG #trans-features-or-trans-tense,
                      AUX-MASCULINE-FLAG #aux-masculine ] ] ].

erg-lex-rule := case-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE erg ].

abs-lex-rule := case-lex-rule-super & const-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE abs ].

dat-lex-rule := case-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE dat ].

all-lex-rule := case-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE all ].

nmz-case-lex-rule-super := add-only-no-ccont-rule & const-lex-rule &
  [ INFLECTED [ INTRANS-TENSE-OR-NMZ-CASE-FLAG +,
                NMZ-CASE-FLAG +,
                NMZ-CASE-OR-TRANS-TENSE-FLAG +,
                CASE-FLAG #case,
                AUX-TENSE-FLAG #aux-tense,
                AUX-MASCULINE-FLAG #aux-masculine,
                TRANS-FEATURES-OR-TRANS-TENSE-FLAG #trans-features-or-trans-tense,
                AUX-FEMINE-FLAG #aux-femine,
                INTRANS-FEATURES-OR-INTRANS-TENSE-FLAG #intrans-features-or-intrans-tense,
                AUX-FIRST-PER-FLAG #aux-first-per ],
    DTR nmz-case-rule-dtr &
        [ INFLECTED [ CASE-FLAG #case,
                      AUX-TENSE-FLAG #aux-tense,
                      AUX-MASCULINE-FLAG #aux-masculine,
                      TRANS-FEATURES-OR-TRANS-TENSE-FLAG #trans-features-or-trans-tense,
                      AUX-FEMINE-FLAG #aux-femine,
                      INTRANS-FEATURES-OR-INTRANS-TENSE-FLAG #intrans-features-or-intrans-tense,
                      AUX-FIRST-PER-FLAG #aux-first-per ] ] ].

acc-lex-rule := nmz-case-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE acc ].

aux-tense-lex-rule-super := add-only-no-ccont-rule &
  [ INFLECTED [ AUX-TENSE-FLAG +,
                NMZ-CASE-FLAG #nmz-case,
                INTRANS-TENSE-OR-NMZ-CASE-FLAG #intrans-tense-or-nmz-case,
                AUX-FIRST-PER-FLAG #aux-first-per,
                NMZ-CASE-OR-TRANS-TENSE-FLAG #nmz-case-or-trans-tense,
                INTRANS-FEATURES-OR-INTRANS-TENSE-FLAG #intrans-features-or-intrans-tense,
                AUX-FEMINE-FLAG #aux-femine,
                CASE-FLAG #case,
                TRANS-FEATURES-OR-TRANS-TENSE-FLAG #trans-features-or-trans-tense,
                AUX-MASCULINE-FLAG #aux-masculine ],
    DTR aux-tense-rule-dtr &
        [ INFLECTED [ NMZ-CASE-FLAG #nmz-case,
                      INTRANS-TENSE-OR-NMZ-CASE-FLAG #intrans-tense-or-nmz-case,
                      AUX-FIRST-PER-FLAG #aux-first-per,
                      NMZ-CASE-OR-TRANS-TENSE-FLAG #nmz-case-or-trans-tense,
                      INTRANS-FEATURES-OR-INTRANS-TENSE-FLAG #intrans-features-or-intrans-tense,
                      AUX-FEMINE-FLAG #aux-femine,
                      CASE-FLAG #case,
                      TRANS-FEATURES-OR-TRANS-TENSE-FLAG #trans-features-or-trans-tense,
                      AUX-MASCULINE-FLAG #aux-masculine ] ] ].

aux-fut-lex-rule := aux-tense-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.TENSE future,
                   CAT.HEAD.FORM finite ] ].

aux-pst-lex-rule := aux-tense-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.TENSE past,
                   CAT.HEAD.FORM finite ] ].

aux-np-awy-lex-rule := aux-tense-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.TENSE nonpast,
                   CAT.HEAD.FORM finite ] ].

aux-non-fin-lex-rule := aux-tense-lex-rule-super & const-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.FORM nonfinite ].

aux-femine-lex-rule-super := add-only-no-ccont-rule & aux-tense-rule-dtr & const-lex-rule &
  [ INFLECTED [ AUX-FEMINE-FLAG +,
                NMZ-CASE-FLAG #nmz-case,
                INTRANS-TENSE-OR-NMZ-CASE-FLAG #intrans-tense-or-nmz-case,
                CASE-FLAG #case,
                NMZ-CASE-OR-TRANS-TENSE-FLAG #nmz-case-or-trans-tense,
                TRANS-FEATURES-OR-TRANS-TENSE-FLAG #trans-features-or-trans-tense,
                AUX-MASCULINE-FLAG #aux-masculine,
                INTRANS-FEATURES-OR-INTRANS-TENSE-FLAG #intrans-features-or-intrans-tense,
                AUX-TENSE-FLAG #aux-tense,
                AUX-FIRST-PER-FLAG #aux-first-per ],
    DTR fem-aux-lex &
        [ INFLECTED [ NMZ-CASE-FLAG #nmz-case,
                      INTRANS-TENSE-OR-NMZ-CASE-FLAG #intrans-tense-or-nmz-case,
                      CASE-FLAG #case,
                      NMZ-CASE-OR-TRANS-TENSE-FLAG #nmz-case-or-trans-tense,
                      TRANS-FEATURES-OR-TRANS-TENSE-FLAG #trans-features-or-trans-tense,
                      AUX-MASCULINE-FLAG #aux-masculine,
                      INTRANS-FEATURES-OR-INTRANS-TENSE-FLAG #intrans-features-or-intrans-tense,
                      AUX-TENSE-FLAG #aux-tense,
                      AUX-FIRST-PER-FLAG #aux-first-per ] ] ].

aux-fem-lex-rule := aux-femine-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ GEND feminine,
                                                                PER 3rd ] ].

trans-features-lex-rule-super := infl-lex-rule & low-nmz-subjid-trans-lex-rule & nmz-case-rule-dtr &
  [ INFLECTED [ TRANS-FEATURES-OR-TRANS-TENSE-FLAG +,
                NMZ-CASE-FLAG #nmz-case,
                INTRANS-TENSE-OR-NMZ-CASE-FLAG #intrans-tense-or-nmz-case,
                CASE-FLAG #case,
                NMZ-CASE-OR-TRANS-TENSE-FLAG #nmz-case-or-trans-tense,
                INTRANS-FEATURES-OR-INTRANS-TENSE-FLAG #intrans-features-or-intrans-tense,
                AUX-FEMINE-FLAG #aux-femine,
                AUX-TENSE-FLAG #aux-tense,
                AUX-FIRST-PER-FLAG #aux-first-per,
                AUX-MASCULINE-FLAG #aux-masculine ],
    DTR trans-features-or-trans-tense-rule-dtr &
        [ INFLECTED [ NMZ-CASE-FLAG #nmz-case,
                      INTRANS-TENSE-OR-NMZ-CASE-FLAG #intrans-tense-or-nmz-case,
                      CASE-FLAG #case,
                      NMZ-CASE-OR-TRANS-TENSE-FLAG #nmz-case-or-trans-tense,
                      INTRANS-FEATURES-OR-INTRANS-TENSE-FLAG #intrans-features-or-intrans-tense,
                      AUX-FEMINE-FLAG #aux-femine,
                      AUX-TENSE-FLAG #aux-tense,
                      AUX-FIRST-PER-FLAG #aux-first-per,
                      AUX-MASCULINE-FLAG #aux-masculine ] ] ].

prior-lex-rule := trans-features-lex-rule-super &
  [ INFLECTED.NMZ-CASE-FLAG -,
    SYNSEM.LOCAL.CAT [ HEAD.FORM PRIOR,
                       VAL.COMPS.FIRST.LOCAL.CAT.HEAD.CASE dat ] ].

purp-lex-rule := trans-features-lex-rule-super &
  [ INFLECTED.NMZ-CASE-FLAG -,
    SYNSEM.LOCAL.CAT [ HEAD.FORM PURP,
                       VAL.COMPS.FIRST.LOCAL.CAT.HEAD.CASE dat ] ].

inf-lex-rule := trans-features-lex-rule-super &
  [ INFLECTED.NMZ-CASE-FLAG -,
    SYNSEM.LOCAL.CAT [ HEAD.FORM INF,
                       VAL.COMPS.FIRST.LOCAL.CAT.HEAD.CASE dat ] ].

intrans-features-lex-rule-super := infl-lex-rule & low-nmz-subjid-compsid-lex-rule & nmz-case-rule-dtr &
  [ INFLECTED [ INTRANS-FEATURES-OR-INTRANS-TENSE-FLAG +,
                NMZ-CASE-FLAG #nmz-case,
                INTRANS-TENSE-OR-NMZ-CASE-FLAG #intrans-tense-or-nmz-case,
                AUX-FIRST-PER-FLAG #aux-first-per,
                NMZ-CASE-OR-TRANS-TENSE-FLAG #nmz-case-or-trans-tense,
                AUX-FEMINE-FLAG #aux-femine,
                CASE-FLAG #case,
                AUX-TENSE-FLAG #aux-tense,
                TRANS-FEATURES-OR-TRANS-TENSE-FLAG #trans-features-or-trans-tense,
                AUX-MASCULINE-FLAG #aux-masculine ],
    DTR intrans-verb-lex &
        [ INFLECTED [ NMZ-CASE-FLAG #nmz-case,
                      INTRANS-TENSE-OR-NMZ-CASE-FLAG #intrans-tense-or-nmz-case,
                      AUX-FIRST-PER-FLAG #aux-first-per,
                      NMZ-CASE-OR-TRANS-TENSE-FLAG #nmz-case-or-trans-tense,
                      AUX-FEMINE-FLAG #aux-femine,
                      CASE-FLAG #case,
                      AUX-TENSE-FLAG #aux-tense,
                      TRANS-FEATURES-OR-TRANS-TENSE-FLAG #trans-features-or-trans-tense,
                      AUX-MASCULINE-FLAG #aux-masculine ] ] ].

inf2-lex-rule := intrans-features-lex-rule-super &
  [ INFLECTED.NMZ-CASE-FLAG -,
    SYNSEM.LOCAL.CAT.HEAD.FORM INF & nonfinite ].

purp2-lex-rule := intrans-features-lex-rule-super &
  [ INFLECTED.NMZ-CASE-FLAG -,
    SYNSEM.LOCAL.CAT.HEAD.FORM PURP ].

prior2-lex-rule := intrans-features-lex-rule-super &
  [ INFLECTED.NMZ-CASE-FLAG -,
    SYNSEM.LOCAL.CAT.HEAD.FORM PRIOR ].

aux-masculine-lex-rule-super := add-only-no-ccont-rule & aux-tense-rule-dtr & const-lex-rule &
  [ INFLECTED [ AUX-MASCULINE-FLAG +,
                NMZ-CASE-FLAG #nmz-case,
                INTRANS-TENSE-OR-NMZ-CASE-FLAG #intrans-tense-or-nmz-case,
                AUX-FIRST-PER-FLAG #aux-first-per,
                NMZ-CASE-OR-TRANS-TENSE-FLAG #nmz-case-or-trans-tense,
                INTRANS-FEATURES-OR-INTRANS-TENSE-FLAG #intrans-features-or-intrans-tense,
                AUX-FEMINE-FLAG #aux-femine,
                CASE-FLAG #case,
                AUX-TENSE-FLAG #aux-tense,
                TRANS-FEATURES-OR-TRANS-TENSE-FLAG #trans-features-or-trans-tense ],
    DTR masc-aux-lex &
        [ INFLECTED [ NMZ-CASE-FLAG #nmz-case,
                      INTRANS-TENSE-OR-NMZ-CASE-FLAG #intrans-tense-or-nmz-case,
                      AUX-FIRST-PER-FLAG #aux-first-per,
                      NMZ-CASE-OR-TRANS-TENSE-FLAG #nmz-case-or-trans-tense,
                      INTRANS-FEATURES-OR-INTRANS-TENSE-FLAG #intrans-features-or-intrans-tense,
                      AUX-FEMINE-FLAG #aux-femine,
                      CASE-FLAG #case,
                      AUX-TENSE-FLAG #aux-tense,
                      TRANS-FEATURES-OR-TRANS-TENSE-FLAG #trans-features-or-trans-tense ] ] ].

aux-masc-lex-rule := aux-masculine-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ GEND masculine-or-neuter,
                                                                PER 3rd ] ].

aux-first-per-lex-rule-super := add-only-no-ccont-rule & aux-tense-rule-dtr & const-lex-rule &
  [ INFLECTED [ AUX-FIRST-PER-FLAG +,
                NMZ-CASE-FLAG #nmz-case,
                INTRANS-TENSE-OR-NMZ-CASE-FLAG #intrans-tense-or-nmz-case,
                CASE-FLAG #case,
                NMZ-CASE-OR-TRANS-TENSE-FLAG #nmz-case-or-trans-tense,
                INTRANS-FEATURES-OR-INTRANS-TENSE-FLAG #intrans-features-or-intrans-tense,
                AUX-FEMINE-FLAG #aux-femine,
                AUX-TENSE-FLAG #aux-tense,
                TRANS-FEATURES-OR-TRANS-TENSE-FLAG #trans-features-or-trans-tense,
                AUX-MASCULINE-FLAG #aux-masculine ],
    DTR first-aux-lex &
        [ INFLECTED [ NMZ-CASE-FLAG #nmz-case,
                      INTRANS-TENSE-OR-NMZ-CASE-FLAG #intrans-tense-or-nmz-case,
                      CASE-FLAG #case,
                      NMZ-CASE-OR-TRANS-TENSE-FLAG #nmz-case-or-trans-tense,
                      INTRANS-FEATURES-OR-INTRANS-TENSE-FLAG #intrans-features-or-intrans-tense,
                      AUX-FEMINE-FLAG #aux-femine,
                      AUX-TENSE-FLAG #aux-tense,
                      TRANS-FEATURES-OR-TRANS-TENSE-FLAG #trans-features-or-trans-tense,
                      AUX-MASCULINE-FLAG #aux-masculine ] ] ].

aux-first-lex-rule := aux-first-per-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 1st ].

trans-tense-lex-rule-super := add-only-no-ccont-rule &
  [ INFLECTED [ TRANS-FEATURES-OR-TRANS-TENSE-FLAG +,
                NMZ-CASE-OR-TRANS-TENSE-FLAG +,
                NMZ-CASE-FLAG #nmz-case,
                INTRANS-TENSE-OR-NMZ-CASE-FLAG #intrans-tense-or-nmz-case,
                CASE-FLAG #case,
                AUX-MASCULINE-FLAG #aux-masculine,
                INTRANS-FEATURES-OR-INTRANS-TENSE-FLAG #intrans-features-or-intrans-tense,
                AUX-FIRST-PER-FLAG #aux-first-per,
                AUX-FEMINE-FLAG #aux-femine,
                AUX-TENSE-FLAG #aux-tense ],
    DTR trans-features-or-trans-tense-rule-dtr &
        [ INFLECTED [ NMZ-CASE-FLAG #nmz-case,
                      INTRANS-TENSE-OR-NMZ-CASE-FLAG #intrans-tense-or-nmz-case,
                      CASE-FLAG #case,
                      AUX-MASCULINE-FLAG #aux-masculine,
                      INTRANS-FEATURES-OR-INTRANS-TENSE-FLAG #intrans-features-or-intrans-tense,
                      AUX-FIRST-PER-FLAG #aux-first-per,
                      AUX-FEMINE-FLAG #aux-femine,
                      AUX-TENSE-FLAG #aux-tense ] ] ].

fut-lex-rule := infl-lex-rule & trans-tense-lex-rule-super &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.TENSE future,
                   CAT.HEAD.FORM nonfinite ] ].

pst-lex-rule := const-lex-rule & trans-tense-lex-rule-super &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.TENSE past,
                   CAT.HEAD.FORM nonfinite ] ].

non-pst-lex-rule := const-lex-rule & trans-tense-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE nonpast ].

intrans-tense-lex-rule-super := add-only-no-ccont-rule &
  [ INFLECTED [ INTRANS-TENSE-OR-NMZ-CASE-FLAG +,
                INTRANS-FEATURES-OR-INTRANS-TENSE-FLAG +,
                NMZ-CASE-FLAG #nmz-case,
                CASE-FLAG #case,
                NMZ-CASE-OR-TRANS-TENSE-FLAG #nmz-case-or-trans-tense,
                AUX-FIRST-PER-FLAG #aux-first-per,
                AUX-FEMINE-FLAG #aux-femine,
                AUX-TENSE-FLAG #aux-tense,
                TRANS-FEATURES-OR-TRANS-TENSE-FLAG #trans-features-or-trans-tense,
                AUX-MASCULINE-FLAG #aux-masculine ],
    DTR intrans-verb-lex &
        [ INFLECTED [ NMZ-CASE-FLAG #nmz-case,
                      CASE-FLAG #case,
                      NMZ-CASE-OR-TRANS-TENSE-FLAG #nmz-case-or-trans-tense,
                      AUX-FIRST-PER-FLAG #aux-first-per,
                      AUX-FEMINE-FLAG #aux-femine,
                      AUX-TENSE-FLAG #aux-tense,
                      TRANS-FEATURES-OR-TRANS-TENSE-FLAG #trans-features-or-trans-tense,
                      AUX-MASCULINE-FLAG #aux-masculine ] ] ].

fut2-lex-rule := infl-lex-rule & intrans-tense-lex-rule-super &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.TENSE future,
                   CAT.HEAD.FORM nonfinite ] ].

pst2-lex-rule := const-lex-rule & intrans-tense-lex-rule-super &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.TENSE past,
                   CAT.HEAD.FORM nonfinite ] ].

non-pst2-lex-rule := const-lex-rule & intrans-tense-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE nonpast ].

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

non-event-subj-head-phrase := head-final-head-nexus & basic-head-subj-phrase &
  [ HEAD-DTR.SYNSEM [ LOCAL.CONT.HOOK.INDEX ref-ind,
                      NON-LOCAL [ QUE 0-dlist,
                                  REL 0-dlist ] ],
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.SPR < > ].

non-event-head-subj-phrase := head-initial-head-nexus & basic-head-subj-phrase &
  [ HEAD-DTR.SYNSEM [ LOCAL.CONT.HOOK.INDEX ref-ind,
                      NON-LOCAL [ QUE 0-dlist,
                                  REL 0-dlist ] ],
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.SPR < > ].

verbal-head-nexus := headed-phrase &
  [ SYNSEM.LOCAL.CAT.HEAD verb ].

head-initial-head-nexus := head-initial &
  [ SYNSEM.LOCAL.CAT.MC na & #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

head-final-head-nexus := head-final &
  [ SYNSEM.LOCAL.CAT.MC bool,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC na ].

head-subj-phrase := decl-head-subj-phrase & head-initial-head-nexus.

subj-head-phrase := decl-head-subj-phrase & head-final-head-nexus.

head-comp-phrase := basic-head-1st-comp-phrase & head-initial-head-nexus &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.INIT + ].

comp-head-phrase := basic-head-1st-comp-phrase & head-final-head-nexus &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.INIT - ].

head-comp-phrase-2 := basic-head-2nd-comp-phrase & head-initial-head-nexus.

comp-head-phrase-2 := basic-head-2nd-comp-phrase & head-final-head-nexus.

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS <! [ PRED "exist_q_rel" ] !> ].

no-subordinator-nominalized-subord-clause-phrase := unary-phrase &
  [ SYNSEM.LOCAL.CAT [ MC -,
                       VAL [ SUBJ #subj,
                             SPR < >,
                             COMPS < > ],
                       HEAD adp &
                            [ MOD < [ LOCAL scopal-mod &
                                            [ CAT [ HEAD verb,
                                                    VAL [ SUBJ < >,
                                                          COMPS < > ] ],
                                              CONT.HOOK [ LTOP #mcl,
                                                          INDEX #index ] ] ] > ] ],
    C-CONT [ RELS <! [ ARG1 #mch,
                       ARG2 #scl ] !>,
             HCONS <! qeq &
                      [ HARG #mch,
                        LARG #mcl ] !>,
             HOOK.INDEX #index ],
    ARGS < [ SYNSEM.LOCAL [ CONT.HOOK.INDEX #scl,
                            CAT [ HEAD noun,
                                  MC na-or-+,
                                  VAL [ SUBJ #subj,
                                        SPR < >,
                                        COMPS < > ] ] ] ] > ].

nmz-PRIOR-shared-subject-modifying-clause-phrase := no-subordinator-nominalized-subord-clause-phrase &
  [ ARGS < [ SYNSEM.LOCAL [ CONT.HOOK.XARG #xarg,
                            CAT [ VAL.SUBJ < unexpressed >,
                                  HEAD.FORM #feat & PRIOR ] ] ] >,
    SYNSEM.LOCAL.CAT.HEAD [ MOD < [ LOCAL.CONT.HOOK.XARG #xarg ] >,
                            FORM #feat ],
    C-CONT.RELS <! [ PRED "_prior_subord_rel" ] !> ].

nmz-posthead-PURP-shared-subject-modifying-clause-phrase := no-subordinator-nominalized-subord-clause-phrase &
  [ ARGS < [ SYNSEM.LOCAL [ CONT.HOOK.XARG #xarg,
                            CAT [ VAL.SUBJ < unexpressed >,
                                  HEAD.FORM #feat & PURP ] ] ] >,
    SYNSEM.LOCAL.CAT [ HEAD [ MOD < [ LOCAL.CONT.HOOK.XARG #xarg ] >,
                              FORM #feat ],
                       POSTHEAD + ],
    C-CONT.RELS <! [ PRED "_purp_subord_rel" ] !> ].

nmz-posthead-INF-shared-subject-modifying-clause-phrase := no-subordinator-nominalized-subord-clause-phrase &
  [ ARGS < [ SYNSEM.LOCAL [ CONT.HOOK.XARG #xarg,
                            CAT [ VAL.SUBJ < unexpressed >,
                                  HEAD.FORM #feat & INF ] ] ] >,
    SYNSEM.LOCAL.CAT [ HEAD [ MOD < [ LOCAL.CONT.HOOK.XARG #xarg ] >,
                              FORM #feat ],
                       POSTHEAD + ],
    C-CONT.RELS <! [ PRED "_purp_subord_rel" ] !> ].

morphological-subord-clause-phrase := unary-phrase &
  [ SYNSEM.LOCAL.CAT [ MC -,
                       VAL [ SUBJ #subj,
                             SPR < >,
                             COMPS < > ],
                       HEAD adp &
                            [ MOD < [ LOCAL scopal-mod &
                                            [ CAT [ HEAD verb,
                                                    VAL [ SUBJ < >,
                                                          SPR < >,
                                                          COMPS < > ] ],
                                              CONT.HOOK [ LTOP #mcl,
                                                          INDEX #index ] ] ] > ] ],
    C-CONT [ RELS <! [ ARG1 #mch,
                       ARG2 #sch ] !>,
             HCONS <! qeq &
                      [ HARG #mch,
                        LARG #mcl ], qeq &
                                     [ HARG #sch,
                                       LARG #scl ] !>,
             HOOK.INDEX #index ],
    ARGS < [ SYNSEM.LOCAL [ CAT [ HEAD verb,
                                  MC na-or-+,
                                  VAL [ SUBJ #subj,
                                        SPR < >,
                                        COMPS < > ] ],
                            CONT.HOOK.LTOP #scl ] ] > ].

finite-posthead-modifying-clause-phrase := morphological-subord-clause-phrase &
  [ ARGS < [ SYNSEM.LOCAL.CAT [ VAL.SUBJ < >,
                                HEAD.FORM #feat & finite ] ] >,
    SYNSEM.LOCAL.CAT [ HEAD.FORM #feat,
                       POSTHEAD + ],
    C-CONT.RELS <! [ PRED "_when+or+because_subord_rel" ] !> ].

finite-prehead-modifying-clause-phrase := morphological-subord-clause-phrase &
  [ ARGS < [ SYNSEM.LOCAL.CAT [ VAL.SUBJ < >,
                                HEAD.FORM #feat & finite ] ] >,
    SYNSEM.LOCAL.CAT [ HEAD.FORM #feat,
                       POSTHEAD - ],
    C-CONT.RELS <! [ PRED "_right+after_subord_rel" ] !> ].
